# scale_colour_manual("", values = cbbPalette) +
# scale_fill_manual("", values = cbbPalette) +
labs(x = "VPDmax (kPa)", y = expression(bold(paste("Effect on BAI (%)"))))+
theme(axis.line=element_line(color="black"),
panel.grid.major=element_blank(),
panel.grid.minor=element_blank(),
panel.border=element_blank(),
panel.background=element_blank(),
axis.text.x=element_text(angle=0, color="black", size=22),
axis.text.y=element_text(angle=0, color="black", size=22),
strip.text=element_text(face="bold", size=18),
axis.line.x = element_line(color="black", size = 0.5),
axis.line.y = element_line(color="black", size = 0.5),
legend.position="top",
legend.key.size = unit(0.75, "cm"),
legend.text = element_text(size=18),
legend.key = element_rect(fill = "white")) +
#guides(color=guide_legend(nrow=1),)+
theme(axis.title.x = element_text(size=22, face="bold"),
axis.title.y= element_text(size=22, face="bold")) +
theme(panel.spacing.x = unit(1.25,"lines"),
panel.spacing.y = unit(1.75,"lines"))
franken.fig <- rbind(ci.terms.graph[ci.terms.graph$Effect %in% c("Tmean", "Precip"),], vpd.graph2[vpd.graph2$Effect %in% "vpd.max",])
# Try merging temp precip and VPD into one figure
vpd.graph2 <- vpd.graph
vpd.graph2$x <- vpd.graph2$x/100
franken.fig <- rbind(ci.terms.graph[ci.terms.graph$Effect %in% c("Tmean", "Precip"),], vpd.graph2[vpd.graph2$Effect %in% "vpd.max",])
summary(franken.fig)
franken.fig$Effect <- recode(franken.fig$Effect, "'vpd.max'='VPDmax'")
franken.fig$Effect <- factor(franken.fig$Effect, levels=c("Tmean", "Precip", "VPDmax"))
franken.graph <- ggplot(data=franken.fig[franken.fig$Effect %in% c("VPDmax", "Tmean", "Precip"), ]) +
facet_grid(Species~Effect, scales="free_x") +
geom_ribbon(aes(x=x, ymin=exp(lwr)*100, ymax=exp(upr)*100, fill=Canopy.Class), alpha=0.5) +
geom_line(aes(x=x, y=exp(mean)*100, color=Canopy.Class))+
scale_fill_manual(values=c("#E69F00","#009E73", "#0072B2"),guide = guide_legend(title = ""))+
scale_color_manual(values=c("#E69F00","#009E73", "#0072B2"),guide = guide_legend(title = ""))+
geom_hline(yintercept=100, linetype="dashed") +
coord_cartesian(ylim=c(50, 150)) +
# scale_colour_manual("", values = cbbPalette) +
# scale_fill_manual("", values = cbbPalette) +
labs(x = "VPDmax (kPa)", y = expression(bold(paste("Effect on BAI (%)"))))+
theme(axis.line=element_line(color="black"),
panel.grid.major=element_blank(),
panel.grid.minor=element_blank(),
panel.border=element_blank(),
panel.background=element_blank(),
axis.text.x=element_text(angle=0, color="black", size=22),
axis.text.y=element_text(angle=0, color="black", size=22),
strip.text=element_text(face="bold", size=18),
axis.line.x = element_line(color="black", size = 0.5),
axis.line.y = element_line(color="black", size = 0.5),
legend.position="top",
legend.key.size = unit(0.75, "cm"),
legend.text = element_text(size=18),
legend.key = element_rect(fill = "white")) +
#guides(color=guide_legend(nrow=1),)+
theme(axis.title.x = element_text(size=22, face="bold"),
axis.title.y= element_text(size=22, face="bold")) +
theme(panel.spacing.x = unit(1.25,"lines"),
panel.spacing.y = unit(1.75,"lines"))
franken.graph
# Try merging temp precip and VPD into one figure
vpd.graph2 <- vpd.graph
vpd.graph2$x <- vpd.graph2$x/100
franken.fig <- rbind(ci.terms.graph[ci.terms.graph$Effect %in% c("Tmean", "Precip"),], vpd.graph2[vpd.graph2$Effect %in% "vpd.max",])
summary(franken.fig)
load("processed_data/gam6_response_graph.Rdata")
ci.terms.graph$Canopy.Class <- recode(ci.terms.graph$Canopy.Class, "'Canopy'='Overstory'; 'I'='Middle'; 'U'='Understory'")
ci.terms.graph$Canopy.Class <- factor(ci.terms.graph$Canopy.Class, levels= c("Overstory", "Middle", "Understory"))
ci.terms.graph$Effect <- recode(ci.terms.graph$Effect, "'tmean'='Tmean';'precip'='Precip'")
ci.terms.graph$Effect <- factor(ci.terms.graph$Effect, levels= c("Tmean", "Precip", "dbh.recon"))
# DBH dwarfs Tmean and Precip
# will make 2 separate graphs and stitch together like ch2 of diss.
ci.terms.graph$Species <- factor(ci.terms.graph$Species, levels = c("TSCA", "FAGR", "ACRU", "QURU"))
vpd.graph2 <- vpd.graph
vpd.graph2$x <- vpd.graph2$x/100
franken.fig <- rbind(ci.terms.graph[ci.terms.graph$Effect %in% c("Tmean", "Precip"),], vpd.graph2[vpd.graph2$Effect %in% "vpd.max",])
summary(franken.fig)
franken.fig$Effect <- recode(franken.fig$Effect, "'vpd.max'='VPDmax'")
franken.fig$Effect <- factor(franken.fig$Effect, levels=c("Tmean", "Precip", "VPDmax"))
franken.graph <- ggplot(data=franken.fig[franken.fig$Effect %in% c("VPDmax", "Tmean", "Precip"), ]) +
facet_grid(Species~Effect, scales="free_x") +
geom_ribbon(aes(x=x, ymin=exp(lwr)*100, ymax=exp(upr)*100, fill=Canopy.Class), alpha=0.5) +
geom_line(aes(x=x, y=exp(mean)*100, color=Canopy.Class))+
scale_fill_manual(values=c("#E69F00","#009E73", "#0072B2"),guide = guide_legend(title = ""))+
scale_color_manual(values=c("#E69F00","#009E73", "#0072B2"),guide = guide_legend(title = ""))+
geom_hline(yintercept=100, linetype="dashed") +
coord_cartesian(ylim=c(50, 150)) +
# scale_colour_manual("", values = cbbPalette) +
# scale_fill_manual("", values = cbbPalette) +
labs(x = "VPDmax (kPa)", y = expression(bold(paste("Effect on BAI (%)"))))+
theme(axis.line=element_line(color="black"),
panel.grid.major=element_blank(),
panel.grid.minor=element_blank(),
panel.border=element_blank(),
panel.background=element_blank(),
axis.text.x=element_text(angle=0, color="black", size=22),
axis.text.y=element_text(angle=0, color="black", size=22),
strip.text=element_text(face="bold", size=18),
axis.line.x = element_line(color="black", size = 0.5),
axis.line.y = element_line(color="black", size = 0.5),
legend.position="top",
legend.key.size = unit(0.75, "cm"),
legend.text = element_text(size=18),
legend.key = element_rect(fill = "white")) +
#guides(color=guide_legend(nrow=1),)+
theme(axis.title.x = element_text(size=22, face="bold"),
axis.title.y= element_text(size=22, face="bold")) +
theme(panel.spacing.x = unit(1.25,"lines"),
panel.spacing.y = unit(1.75,"lines"))
franken.graph
pdf(file="figures/pub_figs/franken_graph.pdf", width=13, height=13)
franken.graph
dev.off()
library(ggplot2); library(maps)
library(car)
library(gridExtra)
library(grid)
#################################################
# Figure 1
# Map and canopy break down
#################################################
# making a figure that has a map of the Sites used in teh New England area
# Pair this with stacked barplots of species and canopy classes at each site
# Barplots first
load("overstory_understory_combined_data_use.Rdata")
summary(test)
# Need to transform back into tree-level data
# Right now there is duplicate information for each tree in each year at each site
cc.tree.data <- data.frame(TreeID = unique(test$TreeID))
for(i in cc.tree.data$TreeID){
cc.tree.data[cc.tree.data$TreeID==i, "Site"] <- unique(test[test$TreeID==i, "Site.Code"])
cc.tree.data[cc.tree.data$TreeID==i, "Canopy.Class"] <- unique(test[test$TreeID==i, "Canopy.Class"])
cc.tree.data[cc.tree.data$TreeID==i, "Species"] <- unique(test[test$TreeID==i, "Species"])
cc.tree.data[cc.tree.data$TreeID==i, "DBH"] <- unique(test[test$TreeID==i, "DBH"])
}
summary(cc.tree.data)
cc.tree.data$Canopy.Class <- recode(cc.tree.data$Canopy.Class, "'Canopy'='Overstory'; 'I'='Middle'; 'U'='Understory'")
cc.tree.data.all <- cc.tree.data
cc.tree.data.all$Site <- as.factor("All")
cc.tree.data2 <- rbind(cc.tree.data, cc.tree.data.all)
summary(cc.tree.data2)
cc.tree.data2$Canopy.Class <- factor(cc.tree.data2$Canopy.Class, levels=c("Overstory", "Middle", "Understory"))
cc.tree.data2$Species <- factor(cc.tree.data2$Species, levels=c("TSCA", "FAGR", "ACRU", "QURU"))
# Pulling out outlier datapoint from the analysis
# HUGE QURU labeled as suppressed
# Pulling LF2029
cc.tree.data2 <- cc.tree.data2[!cc.tree.data2$TreeID=="LF2029",]
write.csv(cc.tree.data2, "canopy_class_tree_data.csv", row.names=F)
for(i in unique(cc.tree.data$Site)){
print(ggplot(data=cc.tree.data[cc.tree.data$Site==i,]) +
geom_bar(aes(x=Species, fill=Canopy.Class)) +
labs(title=paste(i)) +
scale_fill_manual(values=c("#E69F00","#009E73", "#0072B2")) +
theme(axis.line=element_line(color="black"),
panel.grid.major=element_blank(),
panel.grid.minor=element_blank(),
panel.border=element_blank(),
panel.background=element_blank(),
axis.text.x=element_text(angle=0, color="black", size=16, vjust= 0.5),
axis.text.y=element_text(angle=0, color="black", size=16),
strip.text=element_text(face="bold", size=22),
axis.line.x = element_line(color="black", size = 0.5),
axis.line.y = element_line(color="black", size = 0.5),
legend.position="top") +
#legend.key.size = unit(0.75, "cm"),
#legend.text = element_text(size=22),
#legend.key = element_rect(fill = "white")) +
#guides(fill=guide_legend(nrow=1, title="")) +
theme(axis.title.y= element_text(size=24, face="bold")) +
theme(axis.title.x= element_text(size=24, face="bold")))
}
pdf("figures/prelim_figures/site_spp_cc_breakdown.pdf ", width= 13, height = 8.5)
ggplot(data=cc.tree.data2) + facet_wrap(~Site) +
geom_bar(aes(x=Species, fill=Canopy.Class)) +
scale_fill_manual(values=c("#E69F00","#009E73", "#0072B2")) +
theme(axis.line=element_line(color="black"),
panel.grid.major=element_blank(),
panel.grid.minor=element_blank(),
panel.border=element_blank(),
panel.background=element_blank(),
axis.text.x=element_text(angle=0, color="black", size=16, vjust= 0.5),
axis.text.y=element_text(angle=0, color="black", size=16),
strip.text=element_text(face="bold", size=22),
axis.line.x = element_line(color="black", size = 0.5),
axis.line.y = element_line(color="black", size = 0.5),
legend.position="top") +
#legend.key.size = unit(0.75, "cm"),
#legend.text = element_text(size=22),
#legend.key = element_rect(fill = "white")) +
#guides(fill=guide_legend(nrow=1, title="")) +
theme(axis.title.y= element_text(size=24, face="bold")) +
theme(axis.title.x= element_text(size=24, face="bold"))
dev.off()
fig1b <- ggplot(data=cc.tree.data2[cc.tree.data2$Site %in% "All",]) + facet_grid(Species~.) +
geom_histogram(aes(x=DBH, fill=Canopy.Class), binwidth = 5) +
labs(x="DBH", y="Count") +
scale_fill_manual(values=c("#E69F00","#009E73", "#0072B2"), guide = guide_legend(title = "")) +
theme(axis.line=element_line(color="black"),
panel.grid.major=element_blank(),
panel.grid.minor=element_blank(),
panel.border=element_blank(),
panel.background=element_blank(),
axis.text.x=element_text(angle=0, color="black", size=16, vjust= 0.5),
axis.text.y=element_text(angle=0, color="black", size=16),
strip.text=element_text(face="bold", size=22),
axis.line.x = element_line(color="black", size = 0.5),
axis.line.y = element_line(color="black", size = 0.5),
legend.position="top",
legend.text = element_text(size=18)) +
#legend.key.size = unit(0.75, "cm"),
#legend.text = element_text(size=22),
#legend.key = element_rect(fill = "white")) +
#guides(fill=guide_legend(nrow=1, title="")) +
theme(axis.title.y= element_text(size=24, face="bold")) +
theme(axis.title.x= element_text(size=24, face="bold"))
pdf("figures/pub_figs/Fig1b.pdf ", width= 13, height = 8.5)
fig1b
dev.off()
######################################################
# Making maps of sites
######################################################
## A slighly fancier map showing experimental & observational sites locations ##
# Christy Rollinson
# 25 July 2016
## housekeeping
# rm(list=ls())
# Key libraries
library(ggplot2); library(maps)
# # library(rworldmap)
# Define our base directory
# Load in the locations for experimental and observational sites
cc.sites <- read.csv("processed_data/NE_site_locations.csv", header=T)
summary(cc.sites)
# -------------
dat.map <- data.frame(Site = cc.sites$site.name,
Site.Code = cc.sites$Site.Code,
Lat = cc.sites$latitude,
Lon = cc.sites$longitude)
summary(dat.map)
# Setting bounding box for mapping
lat.min <- 42
lat.max <- 47
lon.min <- -76
lon.max <- -70
library(raster)
# 10m land cover from Natural Earth http://www.naturalearthdata.com/downloads/10m-raster-data/10m-natural-earth-1/
nat.earth <- stack("~malexander10/Dropbox/Research/mapping_data/base_layers/NE1_HR_LC_SR_W_DR/NE1_HR_LC_SR_W_DR.tif")
# USFS forest cover http://www.mrlc.gov/nlcd11_data.php
#nat.earth <- stack("base_layers/CONUSCartographic_2_8_16/Cartographic/nlcd2011_usfs_conus_canopy_cartographic.img")
nat.crop <- crop(nat.earth, y=c(lon.min-5, lon.max+5, lat.min-5, lat.max+5))
#nat.crop <- aggregate(nat.crop, fact=2, fun=mean)
rast.table <- data.frame(xyFromCell(nat.crop, 1:ncell(nat.crop)),
getValues(nat.crop/255))
rast.table$rgb <- with(rast.table, rgb(NE1_HR_LC_SR_W_DR.1,
NE1_HR_LC_SR_W_DR.2,
NE1_HR_LC_SR_W_DR.3,
1))
states <- map_data("state")
names(states)
summary(states)
names(states) <- c("Lon", "Lat", paste(names(states[,3:ncol(states)])))
# states.crop <- states[states$Lon %in% range(dat.map$Lon) & states$Lat %in% range(dat.map$Lat),]
dim(states)
# Note: the natural earth data takes quite a while to plot!`
fig1a <- ggplot(data=dat.map) +
guides(fill="none") +
geom_tile(data=rast.table, aes(x=x, y=y), fill=rast.table$rgb) + # NOTE: fill MUST be outside of the aes otherwise it converts it to ggcolors
geom_path(data=states,aes(x = Lon, y = Lat, group=group), color = "black", size=0.1) +
geom_point(aes(x=Lon, y=Lat), color = "red", size=2.5, alpha=0.75) +
geom_text(data = dat.map[!dat.map$Site.Code %in% c("NR", "HF"),], aes(x=Lon+0.25, y=Lat+0.25, label = paste("",as.character(Site.Code), sep="")), color="black", size=5,fontface="bold") +
geom_text(data = dat.map[dat.map$Site.Code %in% "NR",], aes(x=Lon-0.25, y=Lat-0.25, label = paste("",as.character(Site.Code), sep="")), color="black", size=5,fontface="bold") +
geom_text(data = dat.map[dat.map$Site.Code %in% "HF",], aes(x=Lon-0.25, y=Lat-0.25, label = paste("",as.character(Site.Code), sep="")), color="black", size=5,fontface="bold") +
# scale_color_manual(values="red", name="Data Type") +
theme_bw() +
theme(legend.position="none",
axis.text.x=element_text(angle=0, color="black", size=16, vjust= 0.5),
axis.text.y=element_text(angle=0, color="black", size=16)) +
scale_x_continuous(expand=c(0,0), name="Degrees Longitude", limits =c(lon.min - 0.25,lon.max +2.25)) +
scale_y_continuous(expand=c(0,0), name="Degrees Latitude", limits= c(lat.min - 1,lat.max + 1)) +
coord_equal() +
theme(axis.title.y= element_text(size=24, face="bold")) +
theme(axis.title.x= element_text(size=24, face="bold"))
png("figures/pub_figs/fig1a.png", width= 13, height = 8.5, unit="in", res = 300)
fig1a
dev.off()
# png("figures/pub_figs/Figure1.png", width= 13, height = 8.5, unit="in", res = 300)
# grid.newpage()
# pushViewport(viewport(layout=grid.layout(nrow=1,ncol=2, widths=c(1.3,1,2))))
# print(fig1a, vp = viewport(layout.pos.row = 1, layout.pos.col=1))
# print(fig1b, vp = viewport(layout.pos.row = 1, layout.pos.col=2))
#
# dev.off()
library(cowplot)
png(file="figures/pub_figs/Figure1.png", width=15, height= 10, res=300, unit="in")
plot_grid(fig1a, fig1b, align = c("v","h"), nrow = 1, rel_widths = c(0.4, 0.6), labels = c("A)", "B)"))
dev.off()
library(ggplot2); library(maps)
library(car)
library(gridExtra)
library(grid)
#################################################
# Figure 1
# Map and canopy break down
#################################################
# making a figure that has a map of the Sites used in teh New England area
# Pair this with stacked barplots of species and canopy classes at each site
# Barplots first
load("overstory_understory_combined_data_use.Rdata")
summary(test)
# Need to transform back into tree-level data
# Right now there is duplicate information for each tree in each year at each site
cc.tree.data <- data.frame(TreeID = unique(test$TreeID))
for(i in cc.tree.data$TreeID){
cc.tree.data[cc.tree.data$TreeID==i, "Site"] <- unique(test[test$TreeID==i, "Site.Code"])
cc.tree.data[cc.tree.data$TreeID==i, "Canopy.Class"] <- unique(test[test$TreeID==i, "Canopy.Class"])
cc.tree.data[cc.tree.data$TreeID==i, "Species"] <- unique(test[test$TreeID==i, "Species"])
cc.tree.data[cc.tree.data$TreeID==i, "DBH"] <- unique(test[test$TreeID==i, "DBH"])
}
summary(cc.tree.data)
cc.tree.data$Canopy.Class <- recode(cc.tree.data$Canopy.Class, "'Canopy'='Overstory'; 'I'='Middle'; 'U'='Understory'")
cc.tree.data.all <- cc.tree.data
cc.tree.data.all$Site <- as.factor("All")
cc.tree.data2 <- rbind(cc.tree.data, cc.tree.data.all)
summary(cc.tree.data2)
cc.tree.data2$Canopy.Class <- factor(cc.tree.data2$Canopy.Class, levels=c("Overstory", "Middle", "Understory"))
cc.tree.data2$Species <- factor(cc.tree.data2$Species, levels=c("TSCA", "FAGR", "ACRU", "QURU"))
# Pulling out outlier datapoint from the analysis
# HUGE QURU labeled as suppressed
# Pulling LF2029
cc.tree.data2 <- cc.tree.data2[!cc.tree.data2$TreeID=="LF2029",]
write.csv(cc.tree.data2, "canopy_class_tree_data.csv", row.names=F)
for(i in unique(cc.tree.data$Site)){
print(ggplot(data=cc.tree.data[cc.tree.data$Site==i,]) +
geom_bar(aes(x=Species, fill=Canopy.Class)) +
labs(title=paste(i)) +
scale_fill_manual(values=c("#E69F00","#009E73", "#0072B2")) +
theme(axis.line=element_line(color="black"),
panel.grid.major=element_blank(),
panel.grid.minor=element_blank(),
panel.border=element_blank(),
panel.background=element_blank(),
axis.text.x=element_text(angle=0, color="black", size=16, vjust= 0.5),
axis.text.y=element_text(angle=0, color="black", size=16),
strip.text=element_text(face="bold", size=22),
axis.line.x = element_line(color="black", size = 0.5),
axis.line.y = element_line(color="black", size = 0.5),
legend.position="top") +
#legend.key.size = unit(0.75, "cm"),
#legend.text = element_text(size=22),
#legend.key = element_rect(fill = "white")) +
#guides(fill=guide_legend(nrow=1, title="")) +
theme(axis.title.y= element_text(size=24, face="bold")) +
theme(axis.title.x= element_text(size=24, face="bold")))
}
pdf("figures/prelim_figures/site_spp_cc_breakdown.pdf ", width= 13, height = 8.5)
ggplot(data=cc.tree.data2) + facet_wrap(~Site) +
geom_bar(aes(x=Species, fill=Canopy.Class)) +
scale_fill_manual(values=c("#E69F00","#009E73", "#0072B2")) +
theme(axis.line=element_line(color="black"),
panel.grid.major=element_blank(),
panel.grid.minor=element_blank(),
panel.border=element_blank(),
panel.background=element_blank(),
axis.text.x=element_text(angle=0, color="black", size=16, vjust= 0.5),
axis.text.y=element_text(angle=0, color="black", size=16),
strip.text=element_text(face="bold", size=22),
axis.line.x = element_line(color="black", size = 0.5),
axis.line.y = element_line(color="black", size = 0.5),
legend.position="top") +
#legend.key.size = unit(0.75, "cm"),
#legend.text = element_text(size=22),
#legend.key = element_rect(fill = "white")) +
#guides(fill=guide_legend(nrow=1, title="")) +
theme(axis.title.y= element_text(size=24, face="bold")) +
theme(axis.title.x= element_text(size=24, face="bold"))
dev.off()
fig1b <- ggplot(data=cc.tree.data2[cc.tree.data2$Site %in% "All",]) + facet_grid(Species~.) +
geom_histogram(aes(x=DBH, fill=Canopy.Class), binwidth = 5) +
labs(x="DBH (cm)", y="Count") +
scale_fill_manual(values=c("#E69F00","#009E73", "#0072B2"), guide = guide_legend(title = "")) +
theme(axis.line=element_line(color="black"),
panel.grid.major=element_blank(),
panel.grid.minor=element_blank(),
panel.border=element_blank(),
panel.background=element_blank(),
axis.text.x=element_text(angle=0, color="black", size=16, vjust= 0.5),
axis.text.y=element_text(angle=0, color="black", size=16),
strip.text=element_text(face="bold", size=22),
axis.line.x = element_line(color="black", size = 0.5),
axis.line.y = element_line(color="black", size = 0.5),
legend.position="top",
legend.text = element_text(size=18)) +
#legend.key.size = unit(0.75, "cm"),
#legend.text = element_text(size=22),
#legend.key = element_rect(fill = "white")) +
#guides(fill=guide_legend(nrow=1, title="")) +
theme(axis.title.y= element_text(size=24, face="bold")) +
theme(axis.title.x= element_text(size=24, face="bold")) +
theme(panel.spacing.y = unit(1.55,"lines"))
pdf("figures/pub_figs/Fig1b.pdf ", width= 13, height = 8.5)
fig1b
dev.off()
######################################################
# Making maps of sites
######################################################
## A slighly fancier map showing experimental & observational sites locations ##
# Christy Rollinson
# 25 July 2016
## housekeeping
# rm(list=ls())
# Key libraries
library(ggplot2); library(maps)
# # library(rworldmap)
# Define our base directory
# Load in the locations for experimental and observational sites
cc.sites <- read.csv("processed_data/NE_site_locations.csv", header=T)
summary(cc.sites)
# -------------
dat.map <- data.frame(Site = cc.sites$site.name,
Site.Code = cc.sites$Site.Code,
Lat = cc.sites$latitude,
Lon = cc.sites$longitude)
summary(dat.map)
# Setting bounding box for mapping
lat.min <- 42
lat.max <- 47
lon.min <- -76
lon.max <- -70
library(raster)
# 10m land cover from Natural Earth http://www.naturalearthdata.com/downloads/10m-raster-data/10m-natural-earth-1/
nat.earth <- stack("~malexander10/Dropbox/Research/mapping_data/base_layers/NE1_HR_LC_SR_W_DR/NE1_HR_LC_SR_W_DR.tif")
# USFS forest cover http://www.mrlc.gov/nlcd11_data.php
#nat.earth <- stack("base_layers/CONUSCartographic_2_8_16/Cartographic/nlcd2011_usfs_conus_canopy_cartographic.img")
nat.crop <- crop(nat.earth, y=c(lon.min-5, lon.max+5, lat.min-5, lat.max+5))
#nat.crop <- aggregate(nat.crop, fact=2, fun=mean)
rast.table <- data.frame(xyFromCell(nat.crop, 1:ncell(nat.crop)),
getValues(nat.crop/255))
rast.table$rgb <- with(rast.table, rgb(NE1_HR_LC_SR_W_DR.1,
NE1_HR_LC_SR_W_DR.2,
NE1_HR_LC_SR_W_DR.3,
1))
states <- map_data("state")
names(states)
summary(states)
names(states) <- c("Lon", "Lat", paste(names(states[,3:ncol(states)])))
# states.crop <- states[states$Lon %in% range(dat.map$Lon) & states$Lat %in% range(dat.map$Lat),]
dim(states)
# Note: the natural earth data takes quite a while to plot!`
fig1a <- ggplot(data=dat.map) +
guides(fill="none") +
geom_tile(data=rast.table, aes(x=x, y=y), fill=rast.table$rgb) + # NOTE: fill MUST be outside of the aes otherwise it converts it to ggcolors
geom_path(data=states,aes(x = Lon, y = Lat, group=group), color = "black", size=0.1) +
geom_point(aes(x=Lon, y=Lat), color = "red", size=2.5, alpha=0.75) +
geom_text(data = dat.map[!dat.map$Site.Code %in% c("NR", "HF"),], aes(x=Lon+0.25, y=Lat+0.25, label = paste("",as.character(Site.Code), sep="")), color="black", size=5,fontface="bold") +
geom_text(data = dat.map[dat.map$Site.Code %in% "NR",], aes(x=Lon-0.25, y=Lat-0.25, label = paste("",as.character(Site.Code), sep="")), color="black", size=5,fontface="bold") +
geom_text(data = dat.map[dat.map$Site.Code %in% "HF",], aes(x=Lon-0.25, y=Lat-0.25, label = paste("",as.character(Site.Code), sep="")), color="black", size=5,fontface="bold") +
# scale_color_manual(values="red", name="Data Type") +
theme_bw() +
theme(legend.position="none",
axis.text.x=element_text(angle=0, color="black", size=16, vjust= 0.5),
axis.text.y=element_text(angle=0, color="black", size=16)) +
scale_x_continuous(expand=c(0,0), name="Degrees Longitude", limits =c(lon.min - 0.25,lon.max +2.25)) +
scale_y_continuous(expand=c(0,0), name="Degrees Latitude", limits= c(lat.min - 1,lat.max + 1)) +
coord_equal() +
theme(axis.title.y= element_text(size=24, face="bold")) +
theme(axis.title.x= element_text(size=24, face="bold"))
png("figures/pub_figs/fig1a.png", width= 13, height = 8.5, unit="in", res = 300)
fig1a
dev.off()
# png("figures/pub_figs/Figure1.png", width= 13, height = 8.5, unit="in", res = 300)
# grid.newpage()
# pushViewport(viewport(layout=grid.layout(nrow=1,ncol=2, widths=c(1.3,1,2))))
# print(fig1a, vp = viewport(layout.pos.row = 1, layout.pos.col=1))
# print(fig1b, vp = viewport(layout.pos.row = 1, layout.pos.col=2))
#
# dev.off()
library(cowplot)
png(file="figures/pub_figs/Figure1.png", width=15, height= 10, res=300, unit="in")
plot_grid(fig1a, fig1b, align = c("v","h"), nrow = 1, rel_widths = c(0.4, 0.6), labels = c("A)", "B)"))
dev.off()
library(car)
library(dplR)
library(ggplot2)
se <- function(x){
sd(x, na.rm=TRUE) / sqrt((length(!is.na(x))))}
path.met <- "met_data/"
# Loading in climate data from the PRISM extracts
site.clim <- read.csv("processed_data/climate_growing_season.csv", header=T)
site.clim <- site.clim[site.clim$Year <=2014,]
region.clim <- aggregate(site.clim[,!names(site.clim) %in% c("Site.Code", "Year")], by=list(site.clim$Year), FUN=mean, na.rm=T)
names(region.clim) <- c("Year", "tmean", "precip", "vpd.min", "vpd.max")
region.clim.upper <- aggregate(site.clim[,!names(site.clim) %in% c("Site.Code", "Year")], by=list(site.clim$Year), FUN=quantile, prob=0.975, na.rm=T)
names(region.clim.upper) <- c("Year", "tmean", "precip", "vpd.min", "vpd.max")
region.clim.lower <- aggregate(site.clim[,!names(site.clim) %in% c("Site.Code", "Year")], by=list(site.clim$Year), FUN=quantile, prob=0.025, na.rm=T)
names(region.clim.lower) <- c("Year", "tmean", "precip", "vpd.min", "vpd.max")
# Calculating difference since 1950
clim.diff <- as.data.frame(array(dim=c(4,2)))
names(clim.diff) <- c("1950", "2015")
row.names(clim.diff) <- c("tmean", "precip", "vpd.min", "vpd.max")
for(i in row.names(clim.diff)){
clim.diff[row.names(clim.diff)==i,"1950"] <- region.clim[region.clim$Year==1950,i]
clim.diff[row.names(clim.diff)==i,"2015"] <- region.clim[region.clim$Year==2015,i]
}
clim.diff
clim.diff$diff <- clim.diff[,"2015"] - clim.diff[,"1950"]
# calculating lm to get the trend in the climate data
library(nlme)
#region.clim.short <- region.clim[region.clim$Year >=1950,]
lm.tmean <- lm(tmean~Year, data=region.clim)
summary(lm.tmean)
citation()
