citation()
install.packages("jsonlite")
library(jsonlite)
test <- fromJSON("http://www.bungie.net/platform/JSONP/GetBungieNetUser/")
test <- fromJSON("http://www.bungie.net/platform/JSONP/GetBungieNetUser/")
test <- fromJSON("http://www.bungie.net/platform/JSONP/GetBungieNetUser/?")
install.packages("magrittr")
install.packages("httr")
library(magrittr)
library(httr)
library(jsonlite)
r <- GET("https://www.bungie.net/platform/Destiny/Manifest/InventoryItem/1274330687/",
add_headers("X-API-Key" = api_key)
) %>% content("parsed")
api_key <- 6d1c68f9cd564981b4751e7161465cae
api_key <- 6d1c68f9cd564981b4751e7161465cae
api.key <- 6d1c68f9cd564981b4751e7161465cae
api_key <- "6d1c68f9cd564981b4751e7161465cae"
r <- GET("https://www.bungie.net/platform/Destiny2/Manifest/InventoryItem/1274330687/",
add_headers("X-API-Key" = api_key)) %>% content("parsed")
r
r$Response$data$inventoryItem$itemName
r <- GET("https://www.bungie.net/platform/Destiny/Manifest/InventoryItem/1274330687/",
add_headers("X-API-Key" = api_key)) %>% content("parsed")
r$Response$data$inventoryItem$itemName
r
class(r)
r <- GET("https://www.bungie.net/platform/Destiny/Manifest/InventoryItem/",
add_headers("X-API-Key" = api_key)) %>% content("parsed")
r <- GET("https://www.bungie.net/platform/Destiny2/",
add_headers("X-API-Key" = api_key)) %>% content("parsed")
install.packages("xml2")
r <- GET("https://www.bungie.net/platform/Destiny2/",
add_headers("X-API-Key" = api_key)) %>% content("parsed")
r
summary(r)
r <- GET("https://www.bungie.net/platform/Destiny2/Armory/",
add_headers("X-API-Key" = api_key)) %>% content("parsed")
summary(r)
r
library(XML)
library(xml2)
test <- xmlParse(r)
print9r
print(r)
xmlRoot(r)
class(r)
xmlRoot(r$doc)
xmlRoot(r$node)
summary(r$doc)
summary(r$node)
GET("https://www.bungie.net/platform/Destiny2/Armory/",
add_headers("X-API-Key" = api_key)) %>% content("parsed")
r <- GET("https://www.bungie.net/platform/Destiny2/Stats/Definition",
add_headers("X-API-Key" = api_key)) %>% content("parsed")
r
summary(r$doc)
summary(r$node)
source('~/.active-rstudio-document', echo=TRUE)
summary(r)
summary(r$Response)
summary(r$Response$efficiency)
summary(r$Response$efficiency$modes)
stats <- GET("https://www.bungie.net/platform/Destiny2/Stats/Definition",
add_headers("X-API-Key" = api_key)) %>% content("parsed")
summary(stats$Response)
weaps <- GET("https://www.bungie.net/platform/Destiny2/Manifest/",
add_headers("X-API-Key" = api_key)) %>% content("parsed")
weaps
weaps <- GET("https://www.bungie.net/platform/Destiny2/Stats/UniqueWeapons",
add_headers("X-API-Key" = api_key)) %>% content("parsed")
weaps
weaps <- GET("https://www.bungie.net/platform/Destiny2/Stats/UniqueWeapons/",
add_headers("X-API-Key" = api_key)) %>% content("parsed")
weaps
stats
summary(stats$Response)
summary(stats$Response$activitiesCleared)
stats$Response$activitiesCleared
weaps <- GET("https://www.bungie.net/platform/Destiny2/UniqueWeapons/",
add_headers("X-API-Key" = api_key)) %>% content("parsed")
weaps
weaps <- GET("https://www.bungie.net/platform/Destiny2/",
add_headers("X-API-Key" = api_key)) %>% content("parsed")
weaps
weaps <- GET("https://www.bungie.net/platform/Destiny2/Milestones/",
add_headers("X-API-Key" = api_key)) %>% content("parsed")
weaps
weaps <- GET("https://www.bungie.net/platform/Destiny2/UniqueWeapons/",
add_headers("X-API-Key" = api_key)) %>% content("parsed")
setwd("~/Dropbox/Research/research_projects/canopy_class_climate")
load("processed_data/gam_results/gam0_null_model_tempprecip.Rdata")
# SKIP TO LINE 36 FOR DATA INPUT.
library(mgcv)
library(ggplot2)
library(car)
# Christy's GAMM code
# gam1 <- gamm(Y ~  s(Biomass, bs="cr", k=3, by=PFT) + s(tair, k=k, by=PFT) + s(precipf, k=k, by=PFT) + s(CO2, k=k, by=PFT), random=list(PlotID=~1), data=data)
# Loading in my data
# ne.data <- read.csv("processed_data/NESites_tree_plus_climate_and_BA.csv", header=T)
# ne.data$Live.Dead <- recode(ne.data$Live.Dead, "'Li'='LIVE'")
# summary(ne.data)
# ne.data2 <- ne.data[,c("Year", "Site.Code", "TreeID", "RW", "Species", "Canopy.Class", "Live.Dead", "DBH", "dbh.recon", "tmean", "precip", "BA", "BA.inc", "Plot")]
# names(ne.data2) <- c("Year", "Site.Code", "TreeID", "RW", "Species", "Canopy.Class", "Live.Dead", "DBH", "dbh.recon", "tmean", "precip", "BA", "BA.inc", "PlotID")
#
# phd.data <- read.csv("processed_data/AllSites_tree_plus_climate_and_BA.csv", header=T)
# summary(phd.data)
#
# ne.phd.data <- phd.data[phd.data$Site %in% c("Howland", "Harvard"),]
# ne.phd.data$DBH <- ne.phd.data$DBH..cm.
# ne.phd.data$Canopy.Class <- recode(ne.phd.data$Canopy.Class, "'S' = 'U'")
# ne.phd.data$Site.Code <- recode(ne.phd.data$Site, "'Howland'='HO';'Harvard'='HF'")
#
# ne.phd.data2 <- ne.phd.data[,c("Year", "Site.Code", "TreeID", "RW", "Species", "Canopy.Class", "Live.Dead", "DBH", "dbh.recon", "tmean", "precip", "BA", "BA.inc", "PlotID")]
#
# names(ne.data2)
# names(ne.phd.data2)
#
# data.use <- rbind(ne.data2, ne.phd.data2)
# summary(data.use)
# save(data.use, file="processed_data/gam_input_dataset.Rdata")
# Removing the huge BA.inc value tree.  I'm not sure what is happening there.  Ask Christy to take a look
# data.use <- data.use[!data.use$BA.inc > 140,]
# Loading in data.use
# Was merged in script #7 to facilitate VPD data
data.use <- read.csv("processed_data/NESites_tree_plus_climate_and_BA.csv", header=T)
# CR 4 Feb 2018 -- Rather than remove this value, lets just make it NA
# data.use[data.use$BA.inc > 140 & !is.na(data.use$BA.inc),]
data.use[!is.na(data.use$BA.inc) & data.use$BA.inc > 140, "BA.inc"] <- NA
summary(data.use)
# data.use$group <- data.use$Species
# data.use$group <- recode(data.use$group, "'CAOV' = 'CARYA'; 'CACO' = 'CARYA';
#                          'CATE' = 'CARYA'; 'ACSAC' = 'ACSA'; 'BEAL' = 'BETULA'; 'BELE' = 'BETULA'; 'QUMU' = 'QUAL'")
#
# data.use$group.plot <- as.factor(paste(data.use$group, data.use$PlotID, sep="."))
# data.use$Canopy.Class <- recode(data.use$Canopy.Class, "'C' = 'D'")
data.use$Canopy.Class <- recode(data.use$Canopy.Class, "'C' = 'Canopy'; 'D'='Canopy'")
# summary(data.use)
# trimming down the data used to be only living trees, and not any goofs or snags
data.use <- data.use[data.use$Live.Dead=="LIVE" & !is.na(data.use$Live.Dead) & !data.use$Canopy.Class=="F" & !is.na(data.use$Canopy.Class),]
summary(data.use)
# reducing the amount of data for the test runs
# sites.use <- c("Harvard", "Howland", "Morgan Monroe State Park", "Oak Openings Toledo", "Missouri Ozark")
# test <- data.use[data.use$Site %in% sites.use & !is.na(data.use$RW) & !is.na(data.use$BA.inc),]
test <- data.use[!is.na(data.use$RW) & !is.na(data.use$BA.inc),]
summary(test)
test$spp.cc <- as.factor(paste(test$Species, test$Canopy.Class, sep="."))
test$spp.plot <- as.factor(paste(test$Species, test$PlotID, sep="."))
summary(test)
# Get a list of what predictors & responses I'm using
predictors.all <- c("vpd.min", "vpd.max", "tmean", "precip", "Species", "dbh.recon", "Canopy.Class", "spp.plot", "Site.Code", "Year", "PlotID", "spp.cc")
# Getting rid of observations that have NAs in the important variables
test <- test[complete.cases(test[,predictors.all]),]
# test <- test[test$Live.Dead=="LIVE" & !test$Canopy.Class=="F",]
summary(test)
# Subsetting to a set of species that we have enough data to feel good about
#species.use <- c("TSCA", "QURU", "ACRU", "BEAL", "ACSA", "LITU", "QUAL", "CAOV", "CACO", "CATE", "JUVI", "QUVE", "PCRU", "THOC", "PIST")
# spp.use <- c("ACRU", "ACSA", "BETULA", "CARYA", "FAGR", "FRAX", "PIST", "QUAL", "QURU", "QUVE", "SAAL", "TSCA", "ULRU", "PCRU", "THOC", "LITU", "JUVI")
# Looking at select major species for these sites
spp.use <- c("TSCA", "ACRU", "QURU", "FAGR")
test <- test[test$Species %in% spp.use,]
summary(test)
# par(new=F)
# plot(test[test$TreeID=="MMA003", "BA.inc"]~ test[test$TreeID=="MMA003","Year"], type="l")
test$log.dbh <- log(test$dbh.recon)
summary(test)
summary(test)
summary(test$Live.Dead)
summary(test$Canopy.Class)
# RW <- test$RW
# temp <- test$tmean
# precip <- test$precip
# canopy <- test$Canopy.Class
# size <- test$DBH..cm.
# species <- unique(test$Species)
# library(ggplot2)
# ggplot(data=test) +
# facet_wrap(~PlotID) +
# geom_histogram(aes(x=dbh.recon))
# ggplot(data=test) +
# facet_wrap(~Species) +
# geom_histogram(aes(x=dbh.recon))
# hist(test$dbh.recon)
# test2 <- test[test$group %in% c("QURU", "ACRU") & test$Year>=1980,]
# test2 <- test[test$group %in% c("QURU", "ACRU"),]
# test2 <- test[test$Site %in% c("Morgan Monroe State Park", "Harvard"), ]
# test2$log.dbh <- log(test2$dbh.recon)
# summary(test2)
summary(test)
test[test$BA.inc==0, "BA.inc"] <- 1e-6
save(test, file="overstory_understory_combined_data_use.Rdata")
# test.gam3 <- test
# test.gam3$Canopy.Class <- recode(test.gam3$Canopy.Class, "'C' = 'Canopy'; 'D'='Canopy'")
# summary(test.gam3)
# Subsetting out just the FAGR (Gillbrook) and TSCA (Pisgah) for some site level runs
gb.fagr <- test[test$Site.Code %in%"GB" & test$Species %in% "FAGR",]
ps.tsca <- test[test$Site.Code %in%"PS" & test$Species %in% "TSCA",]
###################################################
# HERE'S THE GAMM!!!
###################################################
# RW ~ CLIMATE(Species) + Size
gam.null1 <- gam(log(BA.inc)~ s(tmean, k=3) +
s(precip, k=3) +
s(dbh.recon, k=3) +
s(Year, k=4, by=PlotID)+
Site.Code + PlotID  + TreeID + Canopy.Class + Species,
# random=list(Site=~1, PlotID=~1, TreeID=~1),
data=test)
summary(gam.null1)$r.sq # R-squared
summary(gam.null1)$dev.expl # explained deviance
anova(gam.null1)
AIC(gam.null1)
save(gam.null1, file = "processed_data/gam_results/gam0_null_model_tempprecip.Rdata")
summary(gam.null1)$r.sq # R-squared
summary(gam.null1)$dev.expl # explained deviance
load("processed_data/gam_results/gam0_null_model_vpd.Rdata")
summary(gam.null2)$r.sq # R-squared
summary(gam.null2)$dev.expl # explained deviance
load("processed_data/gam_results/gam4_species_only.Rdata")
load("processed_data/gam_results/gam6_canopy_species_add.Rdata")
load("processed_data/gam_results/gam_vpdmax.Rdata")
summary(gam.vpdmax)$r.sq # R-squared
summary(gam.vpdmax)$dev.expl # explained deviance
summary(gam6)$r.sq # R-squared
summary(gam6)$dev.expl # explained deviance
summary(gam4)$r.sq # R-squared
summary(gam4)$dev.expl # explained deviance
load("processed_data/gam_results/gam2_canopyclass_only.Rdata")
summary(gam2)$dev.expl # explained deviance
summary(gam1)$r.sq # R-squared
summary(gam2)$r.sq # R-squared
