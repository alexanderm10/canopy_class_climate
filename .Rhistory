scale_fill_gradientn(colors=c("darkolivegreen2", "darkolivegreen4", "darkolivegreen", "darkgreen", "red")) +
guides(colour = guide_legend(override.aes = list(alpha = 1, size=4))) +
theme_bw() +
theme(axis.title=element_blank(),
axis.text=element_blank(),
axis.ticks=element_blank(),
panel.grid.major=element_blank(),
panel.border=element_blank(),
panel.grid.minor=element_blank())+
theme(legend.position="top", legend.text= element_text(size=22),legend.title = element_text(size = 22, face = "bold")) +
scale_x_continuous(limits=range(itrdb.df$x, na.rm=T) + c(-100000, 100000),expand=c(0,0) )+
scale_y_continuous(limits=range(itrdb.df$y, na.rm=T) + c(-500000,100000), expand=c(0,0))
#panel.background=element_rect(fill="black"),
#plot.background=element_rect(fill="black"))
dev.off()
ombo) +
guides(fill="none") +
geom_tile(data=rast.table, aes(x=x, y=y), fill=rast.table$rgb) + # NOTE: fill MUST be outside of the aes otherwise it converts it to ggcolors
#geom_path(data=europe,aes(x = Lon, y = Lat, group=group), color = "black", size=0.1) +
geom_point(aes(x=lon, y=lat, color=type, size = type)) +
scale_color_manual(values = c("#E69F00","#0072B2"), guide = "legend", name="Network") +
scale_size_manual(values = c(1, 2.5)) +
guides(colour = guide_legend(override.aes = list(alpha = 1, size=4))) +
guides(size=F) +
#scale_color_manual(values="red", name="Data Type") +
theme_bw() +
theme(legend.position="top") +
coord_cartesian(xlim=range(europe.sites$lon), ylim=range(europe.sites$lat)) + coord_equal()+
scale_x_continuous(limits=range(europe.sites$lon, na.rm=T) + c(-2, 2),expand=c(0,0),name="Degrees Longitude")+
scale_y_continuous(limits=range(europe.sites$lat, na.rm=T) + c(-2,2), expand=c(0,0), name="Degrees Latitude")
png("figures/grant_europe_map.png", height=5, width=5, units="in", res=300)
europe.map
dev.off()
europe.map <- ggplot(data=europe.combo) +
guides(fill="none") +
geom_tile(data=rast.table, aes(x=x, y=y), fill=rast.table$rgb) + # NOTE: fill MUST be outside of the aes otherwise it converts it to ggcolors
#geom_path(data=europe,aes(x = Lon, y = Lat, group=group), color = "black", size=0.1) +
geom_point(aes(x=lon, y=lat, color=type, size = type)) +
scale_color_manual(values = c("#E69F00","#0072B2"), guide = "legend", name="Network") +
scale_size_manual(values = c(1, 2.5)) +
guides(colour = guide_legend(override.aes = list(alpha = 1, size=4))) +
guides(size=F) +
#scale_color_manual(values="red", name="Data Type") +
theme_bw() +
theme(axis.title=element_blank(),
axis.text=element_blank(),
axis.ticks=element_blank(),
panel.grid.major=element_blank(),
panel.border=element_blank(),
panel.grid.minor=element_blank())+
theme(legend.position="top", legend.text= element_text(size=22),legend.title = element_text(size = 22, face = "bold")) +
coord_cartesian(xlim=range(europe.sites$lon), ylim=range(europe.sites$lat)) + coord_equal()+
scale_x_continuous(limits=range(europe.sites$lon, na.rm=T) + c(-2, 2),expand=c(0,0),name="Degrees Longitude")+
scale_y_continuous(limits=range(europe.sites$lat, na.rm=T) + c(-2,2), expand=c(0,0), name="Degrees Latitude")
png("figures/grant_europe_map.png", height=5, width=5, units="in", res=300)
europe.map
dev.off()
ggplot(data=europe.combo) +
guides(fill="none") +
geom_tile(data=rast.table, aes(x=x, y=y), fill=rast.table$rgb) + # NOTE: fill MUST be outside of the aes otherwise it converts it to ggcolors
#geom_path(data=europe,aes(x = Lon, y = Lat, group=group), color = "black", size=0.1) +
geom_point(aes(x=lon, y=lat, color=type, size = type)) +
scale_color_manual(values = c("#E69F00","#0072B2"), guide = "legend", name="Network") +
scale_size_manual(values = c(1, 2.5)) +
guides(colour = guide_legend(override.aes = list(alpha = 1, size=4))) +
guides(size=F) +
#scale_color_manual(values="red", name="Data Type") +
theme_bw() +
theme(axis.title=element_blank(),
axis.text=element_blank(),
axis.ticks=element_blank(),
panel.grid.major=element_blank(),
panel.border=element_blank(),
panel.grid.minor=element_blank())+
theme(legend.position="top", legend.text= element_text(size=22),legend.title = element_text(size = 22, face = "bold")) +
coord_cartesian(xlim=range(europe.sites$lon), ylim=range(europe.sites$lat)) + coord_equal()+
scale_x_continuous(limits=range(europe.sites$lon, na.rm=T) + c(-2, 2),expand=c(0,0),name="Degrees Longitude")+
scale_y_continuous(limits=range(europe.sites$lat, na.rm=T) + c(-2,2), expand=c(0,0), name="Degrees Latitude")
europe.combo <- rbind(itrdb.out2,europe.sites)
europe.map <- ggplot(data=europe.combo) +
guides(fill="none") +
geom_tile(data=rast.table, aes(x=x, y=y), fill=rast.table$rgb) + # NOTE: fill MUST be outside of the aes otherwise it converts it to ggcolors
#geom_path(data=europe,aes(x = Lon, y = Lat, group=group), color = "black", size=0.1) +
geom_point(aes(x=lon, y=lat, color=type, size = type)) +
scale_color_manual(values = c("#E69F00","#0072B2"), guide = "legend", name="Network") +
scale_size_manual(values = c(1, 2.5)) +
guides(colour = guide_legend(override.aes = list(alpha = 1, size=4))) +
guides(size=F) +
#scale_color_manual(values="red", name="Data Type") +
theme_bw() +
theme(axis.title=element_blank(),
axis.text=element_blank(),
axis.ticks=element_blank(),
panel.grid.major=element_blank(),
panel.border=element_blank(),
panel.grid.minor=element_blank())+
theme(legend.position="top", legend.text= element_text(size=22),legend.title = element_text(size = 22, face = "bold")) +
coord_cartesian(xlim=range(europe.sites$lon), ylim=range(europe.sites$lat)) + coord_equal()+
scale_x_continuous(limits=range(europe.sites$lon, na.rm=T) + c(-2, 2),expand=c(0,0),name="Degrees Longitude")+
scale_y_continuous(limits=range(europe.sites$lat, na.rm=T) + c(-2,2), expand=c(0,0), name="Degrees Latitude")
png("figures/grant_europe_map.png", height=5, width=5, units="in", res=300)
europe.map
dev.off()
ggplot(data=europe.combo) +
guides(fill="none") +
geom_tile(data=rast.table, aes(x=x, y=y), fill=rast.table$rgb) + # NOTE: fill MUST be outside of the aes otherwise it converts it to ggcolors
#geom_path(data=europe,aes(x = Lon, y = Lat, group=group), color = "black", size=0.1) +
geom_point(aes(x=lon, y=lat, color=type, size = type)) +
scale_color_manual(values = c("#E69F00","#0072B2"), guide = "legend", name="Network") +
scale_size_manual(values = c(1, 2.5)) +
guides(colour = guide_legend(override.aes = list(alpha = 1, size=4))) +
guides(size=F)
europe.combo <- rbind(itrdb.out2,europe.sites)
itrdb.out2 <- itrdb.out[,c("studyCode", "Latitude", "Longitude")]
names(itrdb.out2) <- c("site", "lat", "lon")
itrdb.out2$type <- as.factor("ITRDB")
europe.combo <- rbind(itrdb.out2,europe.sites)
load("itrdb_europe.Rdata")
worldmap2 <- map_data("world")
worldmap2$region <- as.factor(worldmap2$region)
europe.sites <- read.csv("input_data/FunDiv_european_sites.csv")
load("europe_outlines.Rdata")
summary(itrdb.out)
summary(europe.sites)
europe.sites$type <- as.factor("Expanded")
itrdb.out2 <- itrdb.out[,c("studyCode", "Latitude", "Longitude")]
names(itrdb.out2) <- c("site", "lat", "lon")
itrdb.out2$type <- as.factor("ITRDB")
europe.combo <- rbind(itrdb.out2,europe.sites)
europe.map <- ggplot(data=europe.combo) +
guides(fill="none") +
geom_tile(data=rast.table, aes(x=x, y=y), fill=rast.table$rgb) + # NOTE: fill MUST be outside of the aes otherwise it converts it to ggcolors
#geom_path(data=europe,aes(x = Lon, y = Lat, group=group), color = "black", size=0.1) +
geom_point(aes(x=lon, y=lat, color=type, size = type)) +
scale_color_manual(values = c("#E69F00","#0072B2"), guide = "legend", name="Network") +
scale_size_manual(values = c(1, 2.5)) +
guides(colour = guide_legend(override.aes = list(alpha = 1, size=4))) +
guides(size=F) +
#scale_color_manual(values="red", name="Data Type") +
theme_bw() +
theme(axis.title=element_blank(),
axis.text=element_blank(),
axis.ticks=element_blank(),
panel.grid.major=element_blank(),
panel.border=element_blank(),
panel.grid.minor=element_blank())+
theme(legend.position="top", legend.text= element_text(size=22),legend.title = element_text(size = 22, face = "bold")) +
coord_cartesian(xlim=range(europe.sites$lon), ylim=range(europe.sites$lat)) + coord_equal()+
scale_x_continuous(limits=range(europe.sites$lon, na.rm=T) + c(-2, 2),expand=c(0,0),name="Degrees Longitude")+
scale_y_continuous(limits=range(europe.sites$lat, na.rm=T) + c(-2,2), expand=c(0,0), name="Degrees Latitude")
png("figures/grant_europe_map.png", height=5, width=5, units="in", res=300)
europe.map
dev.off()
worldmap2 <- map_data("world")
worldmap2$region <- as.factor(worldmap2$region)
europe.sites <- read.csv("input_data/FunDiv_european_sites.csv")
load("europe_outlines.Rdata")
summary(itrdb.out)
summary(europe.sites)
europe.sites$type <- as.factor("Expanded")
itrdb.out2 <- itrdb.out[,c("studyCode", "Latitude", "Longitude")]
names(itrdb.out2) <- c("site", "lat", "lon")
itrdb.out2$type <- as.factor("ITRDB")
europe.combo <- rbind(itrdb.out2,europe.sites)
europe.map <- ggplot(data=europe.combo) +
guides(fill="none") +
geom_tile(data=rast.table, aes(x=x, y=y), fill=rast.table$rgb) + # NOTE: fill MUST be outside of the aes otherwise it converts it to ggcolors
#geom_path(data=europe,aes(x = Lon, y = Lat, group=group), color = "black", size=0.1) +
geom_point(aes(x=lon, y=lat, color=type, size = type)) +
scale_color_manual(values = c("#E69F00","#0072B2"), guide = "legend", name="Network") +
scale_size_manual(values = c(1, 2.5)) +
guides(colour = guide_legend(override.aes = list(alpha = 1, size=4))) +
guides(size=F) +
#scale_color_manual(values="red", name="Data Type") +
theme_bw() +
theme(axis.title=element_blank(),
axis.text=element_blank(),
axis.ticks=element_blank(),
panel.grid.major=element_blank(),
panel.border=element_blank(),
panel.grid.minor=element_blank())+
theme(legend.position="top", legend.text= element_text(size=22),legend.title = element_text(size = 22, face = "bold")) +
coord_cartesian(xlim=range(europe.sites$lon), ylim=range(europe.sites$lat)) + coord_equal()+
scale_x_continuous(limits=range(europe.sites$lon, na.rm=T) + c(-2, 2),expand=c(0,0),name="Degrees Longitude")+
scale_y_continuous(limits=range(europe.sites$lat, na.rm=T) + c(-2,2), expand=c(0,0), name="Degrees Latitude")
png("figures/grant_europe_map.png", height=5, width=5, units="in", res=300)
europe.map
dev.off()
################################
# Tryign to map the european sites
################################
library(ggplot2)
library(car)
require(plyr)
require(ggplot2)
require(RColorBrewer)
require(reshape)
require(scales)
require(zoo)
require(gridExtra)
require(grid)
load("itrdb_europe.Rdata")
# Setting bounding box for mapping
lat.min <- 34
lat.max <- 70
lon.min <- -9
lon.max <- 32
library(raster)
# 10m land cover from Natural Earth http://www.naturalearthdata.com/downloads/10m-raster-data/10m-natural-earth-1/
nat.earth <- stack("~malexander10/Dropbox/Research/mapping_data/base_layers/NE1_HR_LC_SR_W_DR/NE1_HR_LC_SR_W_DR.tif")
# USFS forest cover http://www.mrlc.gov/nlcd11_data.php
#nat.earth <- stack("base_layers/CONUSCartographic_2_8_16/Cartographic/nlcd2011_usfs_conus_canopy_cartographic.img")
nat.crop <- crop(nat.earth, y=c(lon.min-5, lon.max+5, lat.min-5, lat.max+5))
nat.crop <- aggregate(nat.crop, fact=2, fun=mean)
rast.table <- data.frame(xyFromCell(nat.crop, 1:ncell(nat.crop)),
getValues(nat.crop/255))
rast.table$rgb <- with(rast.table, rgb(NE1_HR_LC_SR_W_DR.1,
NE1_HR_LC_SR_W_DR.2,
NE1_HR_LC_SR_W_DR.3,
1))
worldmap2 <- map_data("world")
worldmap2$region <- as.factor(worldmap2$region)
europe.sites <- read.csv("input_data/FunDiv_european_sites.csv")
load("europe_outlines.Rdata")
summary(itrdb.out)
summary(europe.sites)
europe.sites$type <- as.factor("Expanded")
itrdb.out2 <- itrdb.out[,c("studyCode", "Latitude", "Longitude")]
names(itrdb.out2) <- c("site", "lat", "lon")
itrdb.out2$type <- as.factor("ITRDB")
europe.combo <- rbind(itrdb.out2,europe.sites)
europe.map <- ggplot(data=europe.combo) +
guides(fill="none") +
geom_tile(data=rast.table, aes(x=x, y=y), fill=rast.table$rgb) + # NOTE: fill MUST be outside of the aes otherwise it converts it to ggcolors
#geom_path(data=europe,aes(x = Lon, y = Lat, group=group), color = "black", size=0.1) +
geom_point(aes(x=lon, y=lat, color=type, size = type)) +
scale_color_manual(values = c("#E69F00","#0072B2"), guide = "legend", name="Network") +
scale_size_manual(values = c(1, 2.5)) +
guides(colour = guide_legend(override.aes = list(alpha = 1, size=4))) +
guides(size=F) +
#scale_color_manual(values="red", name="Data Type") +
theme_bw() +
theme(axis.title=element_blank(),
axis.text=element_blank(),
axis.ticks=element_blank(),
panel.grid.major=element_blank(),
panel.border=element_blank(),
panel.grid.minor=element_blank())+
theme(legend.position="top", legend.text= element_text(size=22),legend.title = element_text(size = 22, face = "bold")) +
coord_cartesian(xlim=range(europe.sites$lon), ylim=range(europe.sites$lat)) + coord_equal()+
scale_x_continuous(limits=range(europe.sites$lon, na.rm=T) + c(-2, 2),expand=c(0,0),name="Degrees Longitude")+
scale_y_continuous(limits=range(europe.sites$lat, na.rm=T) + c(-2,2), expand=c(0,0), name="Degrees Latitude")
png("figures/grant_europe_map.png", height=5, width=5, units="in", res=300)
europe.map
dev.off()
europe.map <- ggplot(data=europe.combo) +
guides(fill="none") +
geom_tile(data=rast.table, aes(x=x, y=y), fill=rast.table$rgb) + # NOTE: fill MUST be outside of the aes otherwise it converts it to ggcolors
#geom_path(data=europe,aes(x = Lon, y = Lat, group=group), color = "black", size=0.1) +
geom_point(aes(x=lon, y=lat, color=type, size = type)) +
scale_color_manual(values = c("#E69F00","#0072B2"), guide = "legend", name="Network") +
scale_size_manual(values = c(1, 2.5)) +
guides(colour = guide_legend(override.aes = list(alpha = 1, size=4))) +
guides(size=F) +
#scale_color_manual(values="red", name="Data Type") +
theme_bw() +
theme(axis.title=element_blank(),
axis.text=element_blank(),
axis.ticks=element_blank(),
panel.grid.major=element_blank(),
panel.border=element_blank(),
panel.grid.minor=element_blank())+
theme(legend.position="none", legend.text= element_text(size=22),legend.title = element_text(size = 22, face = "bold")) +
coord_cartesian(xlim=range(europe.sites$lon), ylim=range(europe.sites$lat)) + coord_equal()+
scale_x_continuous(limits=range(europe.sites$lon, na.rm=T) + c(-2, 2),expand=c(0,0),name="Degrees Longitude")+
scale_y_continuous(limits=range(europe.sites$lat, na.rm=T) + c(-2,2), expand=c(0,0), name="Degrees Latitude")
png("figures/grant_europe_map.png", height=5, width=5, units="in", res=300)
europe.map
dev.off()
# setwd("~/Desktop/ITRDB Map/")
rm(list=ls())
library(ggplot2)
library(raster)
library(maps)
ggplot(data=usa) +
geom_polygon(aes(x=long, y=lat)) + coord_equal()
nbcd <- raster("~/Dropbox/research/NBCD_countrywide_biomass_240m_raster/NBCD_countrywide_biomass_mosaic.tif")
nbcd
# Aggregating nbcd just to make things a little faster for testing
nbcd2 <- aggregate(nbcd, fac=8) # This should make it approx 1 km res.
nbcd2
plot(nbcd2)
# map("usa", add=T)
# Getting the USA map so we can mask data
# map('usa')
usa <- map_data("usa")
# usa <- map("usa", plot=F)
# summary(usa)
#
usa2 <- SpatialPointsDataFrame(usa[,c("long", "lat")], data=usa, proj4string=CRS("+proj=longlat +datum=WGS84 +ellps=WGS84 +towgs84=0,0,0"))
usa2 <- spTransform(usa2, projection(nbcd2))
# mask(nbcd2)
# Making it a data frame
# plot(usa2, pch=16)
usa3 <- data.frame(usa2)
names(usa3)[names(usa3) %in% c("long.1", "lat.1")] <- c("x", "y")
summary(usa3)
png("NBCD_AEA_1km.png", height=8, width=10, units="in", res=120)
plot(nbcd2)
dev.off()
# Read in the ITRDB
load("processed_data/noaa_meta.Rdata")
itrdb <- noaa.meta
summary(itrdb)
# Read in expanded dataset
sites.neil <- read.csv("input_data/neil_ross_combo_update.csv")
summary(sites.neil)
sites.neil <- sites.neil[!sites.neil$Method %in% c("Targeted", "Climate", "Target"),]
sites.neil$Latitude <- sites.neil$LAT
sites.neil$Longitude <- sites.neil$LONG
# Make it a spatial points data frame
itrdb <- SpatialPointsDataFrame(itrdb[,c("Longitude", "Latitude")], data=itrdb, proj4string=CRS("+proj=longlat +datum=WGS84 +ellps=WGS84 +towgs84=0,0,0"))
plot(itrdb) #
sites.neil <- SpatialPointsDataFrame(sites.neil[,c("Longitude", "Latitude")], data=sites.neil, proj4string=CRS("+proj=longlat +datum=WGS84 +ellps=WGS84 +towgs84=0,0,0"))
# Convert it to AEA projection to match itrdb
itrdb <- spTransform(itrdb, projection(nbcd))
plot(itrdb) # YES this will look funky
sites.neil <- spTransform(sites.neil, projection(nbcd))
plot(sites.neil) # YES this will look funky
plot(nbcd2)
points(itrdb, pch=16, cex=0.5)
points(sites.neil, pch=16, cex=0.5)
# Converting nbcd & itrdb back into normal data frames so we can use ggplot
itrdb.df <- data.frame(itrdb)
names(itrdb.df)[names(itrdb.df) %in% c("Longitude.1", "Latitude.1")] <- c("x", "y")
summary(itrdb.df)
neil.df <- data.frame(sites.neil)
names(neil.df)[names(neil.df) %in% c("Longitude.1", "Latitude.1")] <- c("x", "y")
summary(neil.df)
nbcd.df <- data.frame(coordinates(nbcd2))
nbcd.df$Biomass <- as.data.frame(nbcd2)[,1]
summary(nbcd.df)
dim(nbcd.df)
# Crop itrdb.df to what's in the nbcd
itrdb.df <- itrdb.df[itrdb.df$x>=min(nbcd.df$x) & itrdb.df$x<=max(nbcd.df$x) &
itrdb.df$y>=min(nbcd.df$y) & itrdb.df$y<=max(nbcd.df$y),]
summary(itrdb.df)
itrdb.df <- itrdb.df[,c("species.code", "x", "y")]
names(itrdb.df) <- c("species", "x", "y")
itrdb.df$type <- as.factor("ITRDB")
neil.df <- neil.df[neil.df$x>=min(nbcd.df$x) & neil.df$x<=max(nbcd.df$x) &
neil.df$y>=min(nbcd.df$y) & neil.df$y<=max(nbcd.df$y),]
summary(neil.df)
neil.df <- neil.df[,c("species", "x", "y")]
neil.df$type <- as.factor("Expanded")
# usa <- map_data("usa")
combo.df <- rbind(itrdb.df, neil.df)
png("figures/collections_biomass_map.png", height=5, width=5, units="in", res=300)
ggplot(data=nbcd.df[nbcd.df$Biomass>0,]) +
coord_equal() +
geom_polygon(data=usa3, aes(x=x, y=y, group=group), fill="white") +
geom_raster(aes(x=x, y=y, fill=Biomass)) +
guides(fill=F) +
# geom_path(data=usa3, aes(x=x, y=y, group=group)) +
geom_point(data=combo.df, aes(x=x, y=y, color=type), size=2, alpha=0.8) +
# geom_point(data=neil.df, aes(x=x, y=y), size=2, alpha=0.6) +
scale_color_manual(values = c("#E69F00","#0072B2"), guide = "legend", name="Network") +
#annotate("text", x=-1800000, y=-1300000, label="© Christine Rollinson 2016", color="white", size=8) +
scale_fill_gradientn(colors=c("darkolivegreen2", "darkolivegreen4", "darkolivegreen", "darkgreen", "red")) +
guides(colour = guide_legend(override.aes = list(alpha = 1, size=4))) +
theme_bw() +
theme(axis.title=element_blank(),
axis.text=element_blank(),
axis.ticks=element_blank(),
panel.grid.major=element_blank(),
panel.border=element_blank(),
panel.grid.minor=element_blank())+
theme(legend.position="left", legend.text= element_text(size=22),legend.title = element_text(size = 22, face = "bold")) +
scale_x_continuous(limits=range(itrdb.df$x, na.rm=T) + c(-100000, 100000),expand=c(0,0) )+
scale_y_continuous(limits=range(itrdb.df$y, na.rm=T) + c(-500000,100000), expand=c(0,0))
#panel.background=element_rect(fill="black"),
#plot.background=element_rect(fill="black"))
dev.off()
png("figures/collections_biomass_map.png", height=5, width=5, units="in", res=300)
ggplot(data=nbcd.df[nbcd.df$Biomass>0,]) +
coord_equal() +
geom_polygon(data=usa3, aes(x=x, y=y, group=group), fill="white") +
geom_raster(aes(x=x, y=y, fill=Biomass)) +
guides(fill=F) +
# geom_path(data=usa3, aes(x=x, y=y, group=group)) +
geom_point(data=combo.df, aes(x=x, y=y, color=type), size=2, alpha=0.8) +
# geom_point(data=neil.df, aes(x=x, y=y), size=2, alpha=0.6) +
scale_color_manual(values = c("#E69F00","#0072B2"), guide = "legend", name="Network") +
#annotate("text", x=-1800000, y=-1300000, label="© Christine Rollinson 2016", color="white", size=8) +
scale_fill_gradientn(colors=c("darkolivegreen2", "darkolivegreen4", "darkolivegreen", "darkgreen", "red")) +
guides(colour = guide_legend(override.aes = list(alpha = 1, size=4))) +
theme_bw() +
theme(axis.title=element_blank(),
axis.text=element_blank(),
axis.ticks=element_blank(),
panel.grid.major=element_blank(),
panel.border=element_blank(),
panel.grid.minor=element_blank())+
theme(legend.position="top", legend.text= element_text(size=22),legend.title = element_text(size = 22, face = "bold")) +
scale_x_continuous(limits=range(itrdb.df$x, na.rm=T) + c(-100000, 100000),expand=c(0,0) )+
scale_y_continuous(limits=range(itrdb.df$y, na.rm=T) + c(-500000,100000), expand=c(0,0))
#panel.background=element_rect(fill="black"),
#plot.background=element_rect(fill="black"))
dev.off()
load("processed_data/noaa_meta.Rdata")
itrdb <- noaa.meta
summary(itrdb)
summary(itrdb)
summary(itrdb$species.code)
length(uniquw(itrdb$species.code))
length(unique(itrdb$species.code))
summary(noaa.meta)
load("itrdb_europe.Rdata")
europe.itrdb <- itrdb.out
summary(europe.itrdb)
length(unique(noaa.meta$species.code))
length(unique(europe.itrdb$species.code))
unique(noaa.meta$species.code)
length(unique(europe.itrdb$species.code))
unique(europe.itrdb$species.code)
load("processed_data/noaa_meta.Rdata")
summary(noaa.meta)
sites.neil <- read.csv("input_data/neil_ross_combo_update.csv")
summary(sites.neil)
load("itrdb_europe.Rdata")
europe.itrdb <- itrdb.out
summary(europe.itrdb)
length(unique(noaa.meta$species.code))
length(unique(europe.itrdb$species.code))
length(unique(sites.neil$species))
test <- sites.neil[!unique(sites.neil$species) %in% unique(noaa.meta$species.code)]
test <- unique(sites.neil$species)
test
test[!test %in% unique(noaa.meta$species.code)]
meow <- test[!test %in% unique(noaa.meta$species.code)]
length(meow)
meow2 <- test[!test %in% unique(europe.itrdb$species.code)]
length(meow2)
meow3 <- test[!test %in% unique(europe.itrdb$species.code)|unique(noaa.meta$species.code)]
meow3 <- test[!test %in% unique(europe.itrdb$species.code)|!test %in% unique(noaa.meta$species.code)]
length(meow3)
load("processed_data/noaa_meta.Rdata")
sites.neil <- read.csv("input_data/neil_ross_combo_update.csv")
summary(sites.neil)
length(neil.sites)
length(sites.neil)
nrow(sites.neil)
sites.neil <- read.csv("input_data/neil_ross_combo_update.csv", header=T)
summary(sites.neil)
fundiv.sites <- read.csv("FunDiv_european_sites.csv", header=T)
fundiv.sites <- read.csv("input_data/FunDiv_european_sites.csv", header=T)
nrow(fundiv.sites)
nrow(sites.neil)
318+14
load("processed_data/noaa_meta.Rdata")
summary(noaa.meta)
sites.neil <- read.csv("input_data/neil_ross_combo_update.csv", header=T)
summary(sites.neil)
fundiv.sites <- read.csv("input_data/FunDiv_european_sites.csv", header=T)
load("itrdb_europe.Rdata")
europe.itrdb <- itrdb.out
summary(europe.itrdb)
# US ITRDB
length(unique(noaa.meta$species.code))
# Europe ITRDB
length(unique(europe.itrdb$species.code))
summary(sites.neil)
load("processed_data/noaa_meta.Rdata")
summary(noaa.meta)
sites.neil <- read.csv("input_data/neil_ross_combo_update.csv", header=T)
summary(sites.neil)
summary(noaa.meta)
summary(sites.neil)
us.spp <- rbind(noaa.meta$species.code, sites.neil$species)
us.itrdb.spp <- noaa.meta$species.code
combo.spp <- sites.neil$species
combo.spp
us.spp <- rbind(us.itrdb.spp, us.itrdb.spp)
unique(us.spp)
us.spp
us.spp
summary(us.spp)
us.itrdb.spp
us.spp <- c(us.itrdb.spp, us.itrdb.spp)
unique(us.spp)
us.spp
us.itrdb.spp
us.itrdb.spp
us.spp <- c(us.itrdb.spp, combo.spp)
unique(us.spp)
us.spp <- merge(us.itrdb.spp, combo.spp)
unique(us.spp)
us.itrdb.spp
combo.spp
us.spp <- c(us.itrdb.spp, combo.spp)
unique(us.spp)
us.spp <- c(paste(us.itrdb.spp), paste(combo.spp))
unique(us.spp)
as.factor(unique(us.spp))
unique.spp <- as.factor(unique(us.spp))
length(unique(noaa.meta$species.code))
write_csv(unique.spp, file="processed_data/US_spp.csv", row.names=F)
write.csv(unique.spp, file="processed_data/US_spp.csv", row.names=F)
unique.spp <- as.data.frame(as.factor(unique(us.spp)))
names(uniqe.spp) <- "Ross.postdoc.list"
names(unique.spp) <- "Ross.postdoc.list"
write.csv(unique.spp, file="processed_data/US_spp.csv", row.names=F)
