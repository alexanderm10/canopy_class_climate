summary(test)
test$spp.cc <- as.factor(paste(test$Species, test$Canopy.Class, sep="."))
test$spp.plot <- as.factor(paste(test$Species, test$PlotID, sep="."))
summary(test)
# Get a list of what predictors & responses I'm using
predictors.all <- c("tmean", "precip", "Species", "dbh.recon", "Canopy.Class", "spp.plot", "Site.Code", "Year", "PlotID")
# Getting rid of observations that have NAs in the important variables
test <- test[complete.cases(test[,predictors.all]),]
test <- test[test$Live.Dead=="LIVE" & !test$Canopy.Class=="F",]
# Subsetting to a set of species that we have enough data to feel good about
#species.use <- c("TSCA", "QURU", "ACRU", "BEAL", "ACSA", "LITU", "QUAL", "CAOV", "CACO", "CATE", "JUVI", "QUVE", "PCRU", "THOC", "PIST")
# spp.use <- c("ACRU", "ACSA", "BETULA", "CARYA", "FAGR", "FRAX", "PIST", "QUAL", "QURU", "QUVE", "SAAL", "TSCA", "ULRU", "PCRU", "THOC", "LITU", "JUVI")
# Looking at select major species for these sites
spp.use <- c("TSCA", "ACRU", "QURU", "FAGR")
test <- test[test$Species %in% spp.use,]
summary(test)
# par(new=F)
# plot(test[test$TreeID=="MMA003", "BA.inc"]~ test[test$TreeID=="MMA003","Year"], type="l")
test$log.dbh <- log(test$dbh.recon)
summary(test)
summary(test)
summary(test$Live.Dead)
summary(test$Canopy.Class)
# RW <- test$RW
# temp <- test$tmean
# precip <- test$precip
# canopy <- test$Canopy.Class
# size <- test$DBH..cm.
# species <- unique(test$Species)
# library(ggplot2)
# ggplot(data=test) +
# facet_wrap(~PlotID) +
# geom_histogram(aes(x=dbh.recon))
# ggplot(data=test) +
# facet_wrap(~Species) +
# geom_histogram(aes(x=dbh.recon))
# hist(test$dbh.recon)
# test2 <- test[test$group %in% c("QURU", "ACRU") & test$Year>=1980,]
# test2 <- test[test$group %in% c("QURU", "ACRU"),]
# test2 <- test[test$Site %in% c("Morgan Monroe State Park", "Harvard"), ]
# test2$log.dbh <- log(test2$dbh.recon)
# summary(test2)
summary(test)
test[test$BA.inc==0, "BA.inc"] <- 1e-6
save(test, file="overstory_understory_combined_data_use.Rdata")
# test.gam3 <- test
# test.gam3$Canopy.Class <- recode(test.gam3$Canopy.Class, "'C' = 'D'")
# summary(test.gam3)
###################################################
# HERE'S THE GAMM!!!
###################################################
# RW ~ CLIMATE(Species) + Size
gam.null <- gam(log(BA.inc)~ s(tmean, k=3) +
s(precip, k=3) +
s(dbh.recon, k=3) +
s(Year, k=4, by=PlotID)+
Site.Code + PlotID  + TreeID + Canopy.Class + Species,
# random=list(Site=~1, PlotID=~1, TreeID=~1),
data=test)
summary(gam.null)$r.sq # R-squared
summary(gam.null)$dev.expl # explained deviance
anova(gam.null)
AIC(gam.null)
gam1 <- gam(log(BA.inc)~ s(tmean, k=3, by=spp.cc) +
s(precip, k=3, by=spp.cc) +
s(dbh.recon, k=3, by=spp.cc) +
s(Year, k=4, by=PlotID)+
Site.Code + PlotID  + TreeID + Canopy.Class + Species,
# random=list(Site=~1, PlotID=~1, TreeID=~1),
data=test)
summary(gam1)$r.sq # R-squared
summary(gam1)$dev.expl # explained deviance
anova(gam1)
AIC(gam1)
AIC(gam1)
AIC(gam.null)
save(gam1, file="processed_data/gam_results/gam1_climate_by_species.Rdata")
save(gam1, file="processed_data/gam_results/gam1_climate_by_species.Rdata")
gam2 <- gam(log(BA.inc)~ s(tmean, k=3, by=Canopy.Class) +
s(precip, k=3, by=Canopy.Class) +
s(dbh.recon, k=3, by=Canopy.Class) +
s(Year, k=4, by=PlotID)+
Site.Code + PlotID  + TreeID + Canopy.Class + Species,
# random=list(Site=~1, PlotID=~1, TreeID=~1),
data=test)
# Look at the R-squared and explained deviance
summary(gam2)$r.sq # R-squared
summary(gam2)$dev.expl # explained deviance
anova(gam2)
AIC(gam2)
AIC(null)
AIC(gam.null)
AIC(gam1)
gam4 <- gam(log(BA.inc)~ s(tmean, k=3, by=Species) +
s(precip, k=3, by=Species) +
s(dbh.recon, k=3, by=Species) +
s(Year, k=4, by=PlotID)+
Site.Code + PlotID  + TreeID + Canopy.Class + Species,
# random=list(Site=~1, PlotID=~1, TreeID=~1),
data=test)
summary(gam4)$r.sq # R-squared
summary(gam4)$dev.expl # explained deviance
anova(gam4)
AIC(gam4)
AIC(gam1)
AIC(null)
AIC(gam1)
AIC(gam2)
AIC(gam3)
AIC(gam4)
save(gam2, file="processed_data/gam_results/gam2_climate_by_canopyclass.Rdata")
save(gam4, file="processed_data/gam_results/gam4_Site_level_model.Rdata")
save(gam2, file="processed_data/gam_results/gam2_canopyclass_spp_interactions.Rdata")
save(gam4, file="processed_data/gam_results/gam4_species_only.Rdata")
save(gam1, file="processed_data/gam_results/gam1_species_canopy_interactions.Rdata")
save(gam2, file="processed_data/gam_results/gam2_canopyclass_only.Rdata")
n <- 100
data <- test
n.out = n
new.dat <- data.frame(Model="species_response",
Extent=as.factor(paste(min(data$Year), max(data$Year), sep="-")))
# Figure out which vars are numeric vs. factor
vars.num <- vector()
for(v in predictors.all){
if(class(data[,v]) %in% c("numeric", "integer")) vars.num <- c(vars.num, v)
}
# Getting the unique values of our factor variables and adding them to the data frame
# need to skip group & group.cc so we aren't trying to match Carya & Quercus etc
# predictors.all <- predictors.all[!predictors.all %in% c("Species", "spp.plot")]
predictors.all <- c("tmean", "precip", "Species", "dbh.recon", "Canopy.Class", "spp.plot", "Site.Code", "Year", "PlotID")
spline.by=c("Species", "Canopy.Class", "Site.Code", "PlotID") # the "by" terms in the models you're running
for(v in predictors.all[!predictors.all %in% vars.num & !(predictors.all %in% c("Site"))]){
# if v is a factor, merge all unique values into the dataframe
if(!(v %in% spline.by)){ # Only pull the full range of values for whatever the "by" term was by, otherwise everythign should have the same shape, just different intercepts
var.temp <- data.frame(x=unique(data[,v])[1])
}else {
var.temp <- data.frame(x=unique(data[,v]))
}
names(var.temp) <- v
new.dat <- merge(new.dat, var.temp, all.x=T, all.y=T)
}
for(p in unique(new.dat$PlotID)){
new.dat[new.dat$PlotID==p, "Site"] <- unique(test[test$PlotID==p, "Site.Code"])
}
new.dat$Site <- as.factor(new.dat$Site)
summary(new.dat)
var.temp <- data.frame(array(dim=c(n.out, length(vars.num))))
names(var.temp) <- vars.num
for(v in vars.num){
var.temp[,v] <- seq(min(data[,v], na.rm=T), max(data[,v], na.rm=T), length.out=n.out)
}
new.dat <- merge(new.dat, var.temp, all.x=T, all.y=T)
summary(new.dat)
write.csv(new.dat, file="processed_data/sensitivity_extaction_dataframe.csv", row.names=F)
load("processed_data/gam_results/gam1_climate_by_species.Rdata")
n <- 100
# SOurce & run the function
source("0_Calculate_GAMM_Posteriors.R")
# Make things run faster by reducing dimensions
new.dat2 <- new.dat
vars.fac <- c("Site", "PlotID", "TreeID", "Canopy.Class", "Species", "spp.cc")
var.smooth <- "group"
for(v in vars.fac){
if(v == var.smooth) next # keep all levels for our "by" variable
# Get rid of unimportant levels for everything else
l1 <- unique(new.dat2[,v])[1]
new.dat2 <- new.dat2[new.dat2[,v]==l1,]
}
source("0_Calculate_GAMM_Posteriors.R")
load("processed_data/gam_results/gam1_climate_by_species.Rdata")
n <- 100
# SOurce & run the function
source("0_Calculate_GAMM_Posteriors.R")
# Make things run faster by reducing dimensions
new.dat2 <- new.dat
vars.fac <- c("Site", "PlotID", "TreeID", "Canopy.Class", "Species", "spp.cc")
var.smooth <- "spp.cc"
for(v in vars.fac){
if(v == var.smooth) next # keep all levels for our "by" variable
# Get rid of unimportant levels for everything else
l1 <- unique(new.dat2[,v])[1]
new.dat2 <- new.dat2[new.dat2[,v]==l1,]
}
summary(new.dat)
for(v in predictors.all){
if(class(data[,v]) %in% c("numeric", "integer")) vars.num <- c(vars.num, v)
}
# Getting the unique values of our factor variables and adding them to the data frame
# need to skip group & group.cc so we aren't trying to match Carya & Quercus etc
# predictors.all <- predictors.all[!predictors.all %in% c("Species", "spp.plot")]
predictors.all <- c("tmean", "precip", "Species", "dbh.recon", "Canopy.Class", "spp.plot", "Site.Code", "Year", "PlotID")
spline.by=c("Species", "Canopy.Class", "Site.Code", "PlotID", "spp.cc") # the "by" terms in the models you're running
for(v in predictors.all[!predictors.all %in% vars.num & !(predictors.all %in% c("Site"))]){
# if v is a factor, merge all unique values into the dataframe
if(!(v %in% spline.by)){ # Only pull the full range of values for whatever the "by" term was by, otherwise everythign should have the same shape, just different intercepts
var.temp <- data.frame(x=unique(data[,v])[1])
}else {
var.temp <- data.frame(x=unique(data[,v]))
}
names(var.temp) <- v
new.dat <- merge(new.dat, var.temp, all.x=T, all.y=T)
}
# Separate out Plot & Site
# new.dat$PlotID <- as.factor(ifelse(substr(new.dat$TreeID, 1, 3)=="HOW", substr(new.dat$TreeID, 1, 4), substr(new.dat$TreeID, 1, 3)))
# Matching the site for the plot
for(p in unique(new.dat$PlotID)){
new.dat[new.dat$PlotID==p, "Site"] <- unique(test[test$PlotID==p, "Site.Code"])
}
new.dat$Site <- as.factor(new.dat$Site)
summary(new.dat)
predictors.all <- c("tmean", "precip", "Species", "dbh.recon", "Canopy.Class", "spp.plot", "Site.Code", "Year", "PlotID", "spp.cc")
spline.by=c("Species", "Canopy.Class", "Site.Code", "PlotID", "spp.cc") # the "by" terms in the models you're running
for(v in predictors.all[!predictors.all %in% vars.num & !(predictors.all %in% c("Site"))]){
# if v is a factor, merge all unique values into the dataframe
if(!(v %in% spline.by)){ # Only pull the full range of values for whatever the "by" term was by, otherwise everythign should have the same shape, just different intercepts
var.temp <- data.frame(x=unique(data[,v])[1])
}else {
var.temp <- data.frame(x=unique(data[,v]))
}
names(var.temp) <- v
new.dat <- merge(new.dat, var.temp, all.x=T, all.y=T)
}
# Separate out Plot & Site
# new.dat$PlotID <- as.factor(ifelse(substr(new.dat$TreeID, 1, 3)=="HOW", substr(new.dat$TreeID, 1, 4), substr(new.dat$TreeID, 1, 3)))
# Matching the site for the plot
for(p in unique(new.dat$PlotID)){
new.dat[new.dat$PlotID==p, "Site"] <- unique(test[test$PlotID==p, "Site.Code"])
}
new.dat$Site <- as.factor(new.dat$Site)
summary(new.dat)
# getting species from species.plot
# new.dat$group <- as.factor(ifelse(substr(new.dat$group.plot, 1, 4)=="BETU", "BETULA", ifelse(substr(new.dat$group.plot, 1,4)=="CARY", "CARYA", substr(new.dat$group.plot, 1, 4))))
# # Adding in the group.canopy class then getting rid of combinations we don't actually have in our data
# new.dat$group.cc <- as.factor(paste(new.dat$group, new.dat$Canopy.Class, sep="."))
# new.dat <- new.dat[new.dat$group.cc %in% unique(test$group.cc),]
# summary(new.dat)
# Putting the numerical variables into an array and adding it in
var.temp <- data.frame(array(dim=c(n.out, length(vars.num))))
names(var.temp) <- vars.num
for(v in vars.num){
var.temp[,v] <- seq(min(data[,v], na.rm=T), max(data[,v], na.rm=T), length.out=n.out)
}
new.dat <- merge(new.dat, var.temp, all.x=T, all.y=T)
summary(new.dat)
write.csv(new.dat, file="processed_data/sensitivity_extaction_dataframe.csv", row.names=F)
load("processed_data/gam_results/gam1_climate_by_species.Rdata")
n <- 100
# SOurce & run the function
source("0_Calculate_GAMM_Posteriors.R")
# Make things run faster by reducing dimensions
new.dat2 <- new.dat
vars.fac <- c("Site", "PlotID", "TreeID", "Canopy.Class", "Species", "spp.cc")
var.smooth <- "spp.cc"
for(v in vars.fac){
if(v == var.smooth) next # keep all levels for our "by" variable
# Get rid of unimportant levels for everything else
l1 <- unique(new.dat2[,v])[1]
new.dat2 <- new.dat2[new.dat2[,v]==l1,]
}
# Gam1 graphs
n <- 100
data <- test
n.out = n
new.dat <- data.frame(Model="species_response",
Extent=as.factor(paste(min(data$Year), max(data$Year), sep="-")))
# Figure out which vars are numeric vs. factor
vars.num <- vector()
for(v in predictors.all){
if(class(data[,v]) %in% c("numeric", "integer")) vars.num <- c(vars.num, v)
}
# Getting the unique values of our factor variables and adding them to the data frame
# need to skip group & group.cc so we aren't trying to match Carya & Quercus etc
# predictors.all <- predictors.all[!predictors.all %in% c("Species", "spp.plot")]
predictors.all <- c("tmean", "precip", "Species", "dbh.recon", "Canopy.Class", "spp.plot", "Site.Code", "Year", "PlotID", "spp.cc")
spline.by=c("Species", "Canopy.Class", "Site.Code", "PlotID", "spp.cc") # the "by" terms in the models you're running
for(v in predictors.all[!predictors.all %in% vars.num & !(predictors.all %in% c("Site"))]){
# if v is a factor, merge all unique values into the dataframe
if(!(v %in% spline.by)){ # Only pull the full range of values for whatever the "by" term was by, otherwise everythign should have the same shape, just different intercepts
var.temp <- data.frame(x=unique(data[,v])[1])
}else {
var.temp <- data.frame(x=unique(data[,v]))
}
names(var.temp) <- v
new.dat <- merge(new.dat, var.temp, all.x=T, all.y=T)
}
# Separate out Plot & Site
# new.dat$PlotID <- as.factor(ifelse(substr(new.dat$TreeID, 1, 3)=="HOW", substr(new.dat$TreeID, 1, 4), substr(new.dat$TreeID, 1, 3)))
# Matching the site for the plot
for(p in unique(new.dat$PlotID)){
new.dat[new.dat$PlotID==p, "Site"] <- unique(test[test$PlotID==p, "Site.Code"])
}
new.dat$Site <- as.factor(new.dat$Site)
summary(new.dat)
# getting species from species.plot
# new.dat$group <- as.factor(ifelse(substr(new.dat$group.plot, 1, 4)=="BETU", "BETULA", ifelse(substr(new.dat$group.plot, 1,4)=="CARY", "CARYA", substr(new.dat$group.plot, 1, 4))))
# # Adding in the group.canopy class then getting rid of combinations we don't actually have in our data
# new.dat$group.cc <- as.factor(paste(new.dat$group, new.dat$Canopy.Class, sep="."))
# new.dat <- new.dat[new.dat$group.cc %in% unique(test$group.cc),]
# summary(new.dat)
# Putting the numerical variables into an array and adding it in
var.temp <- data.frame(array(dim=c(n.out, length(vars.num))))
names(var.temp) <- vars.num
for(v in vars.num){
var.temp[,v] <- seq(min(data[,v], na.rm=T), max(data[,v], na.rm=T), length.out=n.out)
}
new.dat <- merge(new.dat, var.temp, all.x=T, all.y=T)
summary(new.dat)
write.csv(new.dat, file="processed_data/sensitivity_extaction_dataframe.csv", row.names=F)
load("processed_data/gam_results/gam1_climate_by_species.Rdata")
n <- 100
# SOurce & run the function
source("0_Calculate_GAMM_Posteriors.R")
# Make things run faster by reducing dimensions
new.dat2 <- new.dat
vars.fac <- c("Site", "PlotID", "TreeID", "Canopy.Class", "Species", "spp.cc")
var.smooth <- "spp.cc"
for(v in vars.fac){
if(v == var.smooth) next # keep all levels for our "by" variable
# Get rid of unimportant levels for everything else
l1 <- unique(new.dat2[,v])[1]
new.dat2 <- new.dat2[new.dat2[,v]==l1,]
}
vars.fac
vars.fac <- c("Site.Code", "PlotID", "TreeID", "Canopy.Class", "Species", "spp.cc")
names(new.dat)
vars.fac <- c("Site.Code", "PlotID", "TreeID", "Canopy.Class", "Species", "spp.cc")
g1.ci.terms.pred <- post.distns(model.gam=gam1, model.name="species_response", n=n, newdata=new.dat2, vars=predictors.all, terms=T)
new.dat2 <- new.dat
vars.fac <- c("Site.Code", "PlotID", "TreeID", "Canopy.Class", "Species", "spp.cc")
var.smooth <- "spp.cc"
for(v in vars.fac){
if(v == var.smooth) next # keep all levels for our "by" variable
# Get rid of unimportant levels for everything else
l1 <- unique(new.dat2[,v])[1]
new.dat2 <- new.dat2[new.dat2[,v]==l1,]
}
unique(new.dat2[,v])[1]
vars.fac
names(new.dat)
predictors.all <- c("tmean", "precip", "Species", "dbh.recon", "Canopy.Class", "spp.plot", "Site.Code", "Year", "PlotID", "spp.cc", TreeID)
predictors.all <- c("tmean", "precip", "Species", "dbh.recon", "Canopy.Class", "spp.plot", "Site.Code", "Year", "PlotID", "spp.cc", "TreeID")
spline.by=c("Species", "Canopy.Class", "Site.Code", "PlotID", "spp.cc") # the "by" terms in the models you're running
for(v in predictors.all[!predictors.all %in% vars.num & !(predictors.all %in% c("Site"))]){
# if v is a factor, merge all unique values into the dataframe
if(!(v %in% spline.by)){ # Only pull the full range of values for whatever the "by" term was by, otherwise everythign should have the same shape, just different intercepts
var.temp <- data.frame(x=unique(data[,v])[1])
}else {
var.temp <- data.frame(x=unique(data[,v]))
}
names(var.temp) <- v
new.dat <- merge(new.dat, var.temp, all.x=T, all.y=T)
}
# Separate out Plot & Site
# new.dat$PlotID <- as.factor(ifelse(substr(new.dat$TreeID, 1, 3)=="HOW", substr(new.dat$TreeID, 1, 4), substr(new.dat$TreeID, 1, 3)))
# Matching the site for the plot
for(p in unique(new.dat$PlotID)){
new.dat[new.dat$PlotID==p, "Site"] <- unique(test[test$PlotID==p, "Site.Code"])
}
new.dat$Site <- as.factor(new.dat$Site)
summary(new.dat)
# getting species from species.plot
# new.dat$group <- as.factor(ifelse(substr(new.dat$group.plot, 1, 4)=="BETU", "BETULA", ifelse(substr(new.dat$group.plot, 1,4)=="CARY", "CARYA", substr(new.dat$group.plot, 1, 4))))
# # Adding in the group.canopy class then getting rid of combinations we don't actually have in our data
# new.dat$group.cc <- as.factor(paste(new.dat$group, new.dat$Canopy.Class, sep="."))
# new.dat <- new.dat[new.dat$group.cc %in% unique(test$group.cc),]
# summary(new.dat)
# Putting the numerical variables into an array and adding it in
var.temp <- data.frame(array(dim=c(n.out, length(vars.num))))
names(var.temp) <- vars.num
for(v in vars.num){
var.temp[,v] <- seq(min(data[,v], na.rm=T), max(data[,v], na.rm=T), length.out=n.out)
}
new.dat <- merge(new.dat, var.temp, all.x=T, all.y=T)
summary(new.dat)
write.csv(new.dat, file="processed_data/sensitivity_extaction_dataframe.csv", row.names=F)
load("processed_data/gam_results/gam1_species_canopy_interactions.Rdata")
n <- 100
# SOurce & run the function
source("0_Calculate_GAMM_Posteriors.R")
# Make things run faster by reducing dimensions
new.dat2 <- new.dat
vars.fac <- c("Site.Code", "PlotID", "TreeID", "Canopy.Class", "Species", "spp.cc")
var.smooth <- "spp.cc"
for(v in vars.fac){
if(v == var.smooth) next # keep all levels for our "by" variable
# Get rid of unimportant levels for everything else
l1 <- unique(new.dat2[,v])[1]
new.dat2 <- new.dat2[new.dat2[,v]==l1,]
}
g1.ci.terms.pred <- post.distns(model.gam=gam1, model.name="species_response", n=n, newdata=new.dat2, vars=predictors.all, terms=T)
g1.ci.out <- g1.ci.terms.pred$ci # separting out the confidence interval
g1.ci.out[,predictors.all[!predictors.all %in% vars.num]] <- new.dat2[,predictors.all[!predictors.all %in% vars.num]] # copying over our factor labels
g1.ci.out$x <- as.numeric(g1.ci.out$x) # making x numeric; will make factors NA
summary(g1.ci.out)
g1.ci.out[,c("mean.bai", "lwr.bai", "upr.bai")] <- exp(g1.ci.out[,c("mean", "lwr", "upr")])
spp.colors <- read.csv("spp.Colors.csv", header=T)
summary(spp.colors)
spp.colors <- read.csv("spp.Colors.csv", header=T)
spp.colors <- read.csv("spp.Colors.csv", header=T)
summary(spp.colors)
group.fig <- unique(g1.ci.out$Species)
group.fig <- group.fig[order(group.fig)]
colors.use <- as.vector(c(paste(spp.colors[spp.colors$Species %in% group.fig, "color"])))
ci.terms.graph <- g1.ci.out
ci.terms.graph[ci.terms.graph$mean<(-3),"mean"] <- NA
ci.terms.graph[ci.terms.graph$lwr<(-3),"lwr"] <- -3
ci.terms.graph[ci.terms.graph$upr<(-3),"upr"] <- -3
ci.terms.graph[which(ci.terms.graph$mean>3),"mean"] <- NA
ci.terms.graph[ci.terms.graph$lwr>(3),"lwr"] <- 3
ci.terms.graph[ci.terms.graph$upr>(3),"upr"] <- 3
ci.terms.graph[ci.terms.graph$mean.bai<(0),"mean.bai"] <- NA
ci.terms.graph[ci.terms.graph$lwr.bai<(0),"lwr.bai"] <- 0
ci.terms.graph[ci.terms.graph$upr.bai<(0),"upr.bai"] <- 0
ci.terms.graph[which(ci.terms.graph$mean.bai>30),"mean.bai"] <- NA
ci.terms.graph[ci.terms.graph$lwr.bai>(30),"lwr.bai"] <- 30
ci.terms.graph[ci.terms.graph$upr.bai>(30),"upr.bai"] <- 30
# Truncating to observed range
# DBH
for(s in unique(test$group)){
dbh.min <- min(test[test$group==s, "dbh.recon"])
dbh.max <- max(test[test$group==s, "dbh.recon"])
ci.terms.graph$x <- ifelse(ci.terms.graph$group!=s | ci.terms.graph$Effect!="dbh.recon" | (ci.terms.graph$x>=dbh.min & ci.terms.graph$x<=dbh.max), ci.terms.graph$x, NA)
}
# Temp
for(s in unique(test$group)){
temp.min <- min(test[test$group==s, "tmean"])
temp.max <- max(test[test$group==s, "tmean"])
ci.terms.graph$x <- ifelse(ci.terms.graph$group!=s | ci.terms.graph$Effect!="tmean" | (ci.terms.graph$x>=temp.min & ci.terms.graph$x<=temp.max), ci.terms.graph$x, NA)
}
# Precip
for(s in unique(test$group)){
precip.min <- min(test[test$group==s, "precip"])
precip.max <- max(test[test$group==s, "precip"])
ci.terms.graph$x <- ifelse(ci.terms.graph$group!=s | ci.terms.graph$Effect!="precip" | (ci.terms.graph$x>=precip.min & ci.terms.graph$x<=precip.max), ci.terms.graph$x, NA)
}
save(ci.terms.graph,file="processed_data/gam1_response_graph.Rdata")
ggplot(data=ci.terms.graph[ci.terms.graph$Effect %in% c("tmean"), ]) +
facet_wrap(group~Effect) +
geom_line(aes(x=x, y=0), linetype="dotted")+
geom_ribbon(aes(x=x, ymin=exp(lwr), ymax=exp(upr), fill=group), alpha=0.5) +
geom_line(aes(x=x, y=exp(mean), color=group)) +
scale_color_manual(values=colors.use) +
scale_fill_manual(values=colors.use)+
theme_bw()+
labs(x = "Climate Variable", y = expression(bold(paste("Effect on BAI (mm"^"2", 							"y"^"-1",")")))) +
ylim(0,5)
ggplot(data=ci.terms.graph[ci.terms.graph$Effect %in% c("tmean"), ]) +
facet_wrap(Species~Effect) +
geom_line(aes(x=x, y=0), linetype="dotted")+
geom_ribbon(aes(x=x, ymin=exp(lwr), ymax=exp(upr), fill=group), alpha=0.5) +
geom_line(aes(x=x, y=exp(mean), color=group)) +
#scale_color_manual(values=colors.use) +
#scale_fill_manual(values=colors.use)+
theme_bw()+
labs(x = "Climate Variable", y = expression(bold(paste("Effect on BAI (mm"^"2", 							"y"^"-1",")")))) +
ylim(0,5)
ggplot(data=ci.terms.graph[ci.terms.graph$Effect %in% c("tmean"), ]) +
facet_wrap(spp.cc~Effect) +
geom_line(aes(x=x, y=0), linetype="dotted")+
geom_ribbon(aes(x=x, ymin=exp(lwr), ymax=exp(upr), fill=spp.cc), alpha=0.5) +
geom_line(aes(x=x, y=exp(mean), color=group)) +
#scale_color_manual(values=colors.use) +
#scale_fill_manual(values=colors.use)+
theme_bw()+
labs(x = "Climate Variable", y = expression(bold(paste("Effect on BAI (mm"^"2", 							"y"^"-1",")")))) +
ylim(0,5)
ggplot(data=ci.terms.graph[ci.terms.graph$Effect %in% c("tmean"), ]) +
facet_wrap(Canopy.Class~Effect) +
geom_line(aes(x=x, y=0), linetype="dotted")+
geom_ribbon(aes(x=x, ymin=exp(lwr), ymax=exp(upr), fill=spp.cc), alpha=0.5) +
geom_line(aes(x=x, y=exp(mean), color=spp.cc)) +
#scale_color_manual(values=colors.use) +
#scale_fill_manual(values=colors.use)+
theme_bw()+
labs(x = "Climate Variable", y = expression(bold(paste("Effect on BAI (mm"^"2", 							"y"^"-1",")")))) +
ylim(0,5)
summary(ci.terms.graph)
# Gam1 graphs
n <- 100
data <- test
n.out = n
new.dat <- data.frame(Model="spp.cc",
Extent=as.factor(paste(min(data$Year), max(data$Year), sep="-")))
# Figure out which vars are numeric vs. factor
vars.num <- vector()
for(v in predictors.all){
if(class(data[,v]) %in% c("numeric", "integer")) vars.num <- c(vars.num, v)
}
# Getting the unique values of our factor variables and adding them to the data frame
# need to skip group & group.cc so we aren't trying to match Carya & Quercus etc
# predictors.all <- predictors.all[!predictors.all %in% c("Species", "spp.plot")]
predictors.all <- c("tmean", "precip", "Species", "dbh.recon", "Canopy.Class", "spp.plot", "Site.Code", "Year", "PlotID", "spp.cc", "TreeID")
spline.by=c("Species", "Canopy.Class", "Site.Code", "PlotID", "spp.cc") # the "by" terms in the models you're running
for(v in predictors.all[!predictors.all %in% vars.num & !(predictors.all %in% c("Site"))]){
# if v is a factor, merge all unique values into the dataframe
if(!(v %in% spline.by)){ # Only pull the full range of values for whatever the "by" term was by, otherwise everythign should have the same shape, just different intercepts
var.temp <- data.frame(x=unique(data[,v])[1])
}else {
var.temp <- data.frame(x=unique(data[,v]))
}
names(var.temp) <- v
new.dat <- merge(new.dat, var.temp, all.x=T, all.y=T)
}
# Separate out Plot & Site
# new.dat$PlotID <- as.factor(ifelse(substr(new.dat$TreeID, 1, 3)=="HOW", substr(new.dat$TreeID, 1, 4), substr(new.dat$TreeID, 1, 3)))
# Matching the site for the plot
for(p in unique(new.dat$PlotID)){
new.dat[new.dat$PlotID==p, "Site"] <- unique(test[test$PlotID==p, "Site.Code"])
}
new.dat$Site <- as.factor(new.dat$Site)
summary(new.dat)
summary(test)
